!function(){"use strict";class e{constructor(){this.events=new Map}on(e,t,o={}){if("function"!=typeof t)throw new Error("Listener must be a function");this.events.has(e)||this.events.set(e,[]);const i={listener:t,once:o.once||!1};return this.events.get(e).push(i),this}once(e,t){return this.on(e,t,{once:!0})}off(e,t){if(!this.events.has(e))return this;const o=this.events.get(e),i=o.findIndex((e=>e.listener===t));return-1!==i&&(o.splice(i,1),0===o.length&&this.events.delete(e)),this}emit(e,...t){if(!this.events.has(e))return!1;const o=this.events.get(e).slice();let i=!1;for(const n of o){i=!0;try{n.listener.apply(this,t)}catch(l){console.error(`Error in event listener for '${e}':`,l)}n.once&&this.off(e,n.listener)}return i}eventNames(){return Array.from(this.events.keys())}listenerCount(e){return this.events.has(e)?this.events.get(e).length:0}listeners(e){return this.events.has(e)?this.events.get(e).map((e=>e.listener)):[]}removeAllListeners(e){return e?this.events.delete(e):this.events.clear(),this}setMaxListeners(e){return this.maxListeners=e,this}getMaxListeners(){return this.maxListeners||10}}class t extends e{constructor(e,t){super(),this.runtime=e,this.element=this._ensureDOMElement(t),this.container=this.element,this.form=null,this.currentTab="upload",this.uploadedFile=null,this._bindMethods(),"loading"===document.readyState?document.addEventListener("DOMContentLoaded",(()=>this.init())):this.init()}_ensureDOMElement(e){var t,o;if(console.log("[StudioEditor] Element type:",typeof e),console.log("[StudioEditor] Element constructor:",null==(t=null==e?void 0:e.constructor)?void 0:t.name),console.log("[StudioEditor] Element nodeType:",null==e?void 0:e.nodeType),console.log("[StudioEditor] Element jquery property:",null==e?void 0:e.jquery),console.log("[StudioEditor] Element length:",null==e?void 0:e.length),e&&e.nodeType===Node.ELEMENT_NODE)return console.log("[StudioEditor] Element is already a native DOM element"),e;if(e&&(e.jquery||"function"==typeof e.get&&void 0!==e.length||e.constructor&&e.constructor.fn&&e.constructor.fn.jquery)){console.log("[StudioEditor] Converting jQuery object to DOM element"),console.log("[StudioEditor] jQuery object details:",{length:e.length,hasGet:"function"==typeof e.get,hasJquery:!!e.jquery,element0:e[0],element0Type:null==(o=e[0])?void 0:o.nodeType});let t=e[0];if(t&&t.nodeType===Node.ELEMENT_NODE?console.log("[StudioEditor] Got DOM element via element[0]"):(t=e.get(0),console.log("[StudioEditor] Got DOM element via element.get(0)")),t&&t.nodeType===Node.ELEMENT_NODE)return console.log("[StudioEditor] Successfully converted jQuery to DOM element:",t),t}if("string"==typeof e){console.log("[StudioEditor] Element is a string selector, finding element:",e);const t=document.querySelector(e);if(t)return t}throw console.error("[StudioEditor] Could not convert element to DOM element:",e),new Error("StudioEditor requires a valid DOM element or jQuery object")}_bindMethods(){this.init=this.init.bind(this),this.switchTab=this.switchTab.bind(this),this.handleFileUpload=this.handleFileUpload.bind(this),this.handleDragOver=this.handleDragOver.bind(this),this.handleDragLeave=this.handleDragLeave.bind(this),this.handleDrop=this.handleDrop.bind(this),this.handleFormSubmit=this.handleFormSubmit.bind(this),this.handleCancel=this.handleCancel.bind(this),this.processFile=this.processFile.bind(this)}init(){console.log("[StudioEditor] Initializing PDF XBlock Studio Editor");try{const e=this._ensureElement();if(console.log("[StudioEditor] Got DOM element for initialization"),this.form=e.querySelector("#pdf-form"),!this.form)return console.error("[StudioEditor] Form not found"),void console.error("[StudioEditor] Available form elements:",Array.from(e.querySelectorAll("form")).map((e=>e.id||e.className)));this._detectExistingDataAndSetTab(),this._setupTabSwitching(),this._setupFileUpload(),this._setupFormHandlers(),console.log("[StudioEditor] Studio Editor initialized successfully")}catch(e){throw console.error("[StudioEditor] Error during initialization:",e),e}}_detectExistingDataAndSetTab(){try{const e=this._ensureElement(),t=e.querySelector("#pdf-url"),o=e.querySelector("#pdf-file-name")||e.querySelector('input[name="pdf_file_name"]'),i=e.querySelector("#pdf-file-asset-key")||e.querySelector('input[name="pdf_file_asset_key"]'),l=e.querySelector("#file-info"),n=t?t.value.trim():"",s=o?o.value.trim():"",r=i?i.value.trim():"",d=l?l.textContent.trim():"",a=d&&!d.includes("No file chosen")&&!d.includes("placeholder");if(console.log("[StudioEditor] Detecting existing data..."),console.log("[StudioEditor] Existing PDF URL:",n),console.log("[StudioEditor] Existing file name:",s),console.log("[StudioEditor] Existing asset key:",r),console.log("[StudioEditor] File info text:",d),console.log("[StudioEditor] Has existing file info:",a),r){console.log("[StudioEditor] Found existing contentstore asset, switching to upload tab"),this.currentTab="upload",this.switchTab("upload");const e=s||"Uploaded PDF";this.showUploadedFileState(e,"open_edx_contentstore",r)}else if(s||a){console.log("[StudioEditor] Found existing uploaded file, switching to upload tab"),this.currentTab="upload",this.switchTab("upload");let e="server_stored";n.startsWith("data:application/pdf")?e="data_url_fallback":n&&(e="django_file_storage");const t=s||d||"Uploaded PDF";this.showUploadedFileState(t,e)}else n?(console.log("[StudioEditor] Found existing PDF URL, switching to URL tab"),this.currentTab="url",this.switchTab("url")):(console.log("[StudioEditor] No existing PDF data, defaulting to upload tab"),this.currentTab="upload",this.switchTab("upload"))}catch(e){console.error("[StudioEditor] Error detecting existing data:",e),this.currentTab="upload",this.switchTab("upload")}}_setupTabSwitching(){try{const e=this._ensureElement();e.querySelectorAll("[data-tab]").forEach((e=>{e.addEventListener("click",(t=>{t.preventDefault();const o=e.getAttribute("data-tab");this.switchTab(o)}))}))}catch(e){console.error("[StudioEditor] Error setting up tab switching:",e)}}switchTab(e){console.log(`[StudioEditor] Switching to tab: ${e}`);try{const t=this._ensureElement();t.querySelectorAll("[data-tab]").forEach((t=>{t.getAttribute("data-tab")===e?t.classList.add("active"):t.classList.remove("active")}));const o=t.querySelector("#upload-tab"),i=t.querySelector("#url-tab");o&&i?"upload"===e?(o.style.display="block",i.style.display="none"):(o.style.display="none",i.style.display="block"):(console.warn("[StudioEditor] Tab content elements not found"),console.warn("[StudioEditor] uploadTab:",o),console.warn("[StudioEditor] urlTab:",i)),this.currentTab=e,this.emit("tabChanged",{tab:e})}catch(t){console.error("[StudioEditor] Error switching tabs:",t)}}_setupFileUpload(){try{const e=this._ensureElement(),t=e.querySelector("#pdf-file"),o=e.querySelector("#upload-trigger"),i=e.querySelector("#drop-zone");if(!t||!o||!i)return console.warn("[StudioEditor] Upload elements not found"),console.warn("[StudioEditor] fileInput:",t),console.warn("[StudioEditor] uploadTrigger:",o),void console.warn("[StudioEditor] dropZone:",i);t.addEventListener("change",this.handleFileUpload),o.addEventListener("click",(e=>{e.preventDefault(),t.click()})),i.addEventListener("dragover",this.handleDragOver),i.addEventListener("dragleave",this.handleDragLeave),i.addEventListener("drop",this.handleDrop),["dragenter","dragover","dragleave","drop"].forEach((e=>{document.addEventListener(e,(e=>{e.preventDefault(),e.stopPropagation()}))}))}catch(e){console.error("[StudioEditor] Error setting up file upload:",e)}}handleFileUpload(e){const t=e.target.files[0];t&&(this.resetToFileSelectionState(),this.processFile(t))}handleDragOver(e){e.preventDefault();this._ensureElement().querySelector("#drop-zone").classList.add("drag-over")}handleDragLeave(e){e.preventDefault();this._ensureElement().querySelector("#drop-zone").classList.remove("drag-over")}handleDrop(e){e.preventDefault();this._ensureElement().querySelector("#drop-zone").classList.remove("drag-over");const t=e.dataTransfer.files;t.length>0&&(this.resetToFileSelectionState(),this.processFile(t[0]))}processFile(e){if(console.log("[StudioEditor] Processing file:",{name:e.name,size:e.size,type:e.type}),"application/pdf"!==e.type)return void this.showError("Please select a PDF file.");e.size>104857600?this.showError("File size must be less than 100MB."):(this.uploadedFile=e,console.log("[StudioEditor] File stored for upload"),this.updateFileInfo(e),this.switchTab("upload"))}updateFileInfo(e){var t;console.log("[StudioEditor] updateFileInfo - Processing file:",e.name);try{const t=this._ensureElement();console.log("[StudioEditor] updateFileInfo - Got DOM element successfully");const o=t.querySelector("#pdf-file-name");o?(o.value=e.name,console.log("[StudioEditor] updateFileInfo - Updated hidden field with file name:",e.name)):console.warn("[StudioEditor] updateFileInfo - Hidden pdf-file-name field not found");const i=t.querySelector("#file-info");if(i){const t=(e.size/1048576).toFixed(2);i.innerHTML=`\n                    <span class="filename">${e.name}</span>\n                    <span class="filesize">(${t} MB)</span>\n                    <span class="file-status pending">Ready to upload</span>\n                `,console.log("[StudioEditor] updateFileInfo - File info updated successfully")}else console.warn("[StudioEditor] updateFileInfo - #file-info element not found"),console.warn("[StudioEditor] updateFileInfo - Available elements in container:",Array.from(t.querySelectorAll("[id]")).map((e=>e.id)))}catch(o){console.error("[StudioEditor] updateFileInfo - Error updating file info:",o),console.error("[StudioEditor] updateFileInfo - Element details:",{elementType:typeof this.element,hasQuerySelector:typeof this.element.querySelector,isJQuery:!!this.element.jquery,elementConstructor:null==(t=this.element.constructor)?void 0:t.name})}}showUploadedFileState(e,t="unknown",o=null){console.log("[StudioEditor] showUploadedFileState - Showing uploaded file state for:",e),console.log("[StudioEditor] showUploadedFileState - Storage method:",t),console.log("[StudioEditor] showUploadedFileState - Storage path:",o);try{const i=this._ensureElement(),l=i.querySelector("#file-info"),n=i.querySelector("#uploaded-file-info"),s=i.querySelector("#upload-trigger"),r=i.querySelector("#drop-zone");if(l){let i="",n="",s=!0;switch(t){case"open_edx_contentstore":i=o||"",n="Open edX Course Assets",s=!!i,console.log("[StudioEditor] showUploadedFileState - Using contentstore asset URL:",i);break;case"django_file_storage":i=this.runtime.handlerUrl(this.element,"serve_pdf_file"),n="Django File Storage",s=!0,console.log("[StudioEditor] showUploadedFileState - Using Django storage handler URL:",i);break;case"data_url_fallback":i="#",n="Embedded Data URL",s=!1,console.log("[StudioEditor] showUploadedFileState - Using data URL storage (preview disabled)");break;case"server_stored":i=this.runtime.handlerUrl(this.element,"serve_pdf_file"),n="Server Storage",s=!0,console.log("[StudioEditor] showUploadedFileState - Using server storage handler URL:",i);break;default:i=this.runtime.handlerUrl(this.element,"serve_pdf_file"),n="Unknown Storage",s=!0,console.log("[StudioEditor] showUploadedFileState - Using fallback handler URL:",i)}const r=s&&"#"!==i?`<a href="${i}" target="_blank" style="color: #2e7d32; text-decoration: none;">\n                        ${e}\n                    </a>`:`<span style="color: #2e7d32;">${e}</span>`,d=s&&"#"!==i?`<a href="${i}" target="_blank" class="button preview-btn" style="background-color: #4caf50; color: white; padding: 6px 12px; border-radius: 4px; text-decoration: none; font-size: 12px; margin-right: 8px;">\n                        <i class="fas fa-eye"></i> Preview PDF\n                    </a>`:'<span class="button preview-btn disabled" style="background-color: #ccc; color: #666; padding: 6px 12px; border-radius: 4px; font-size: 12px; margin-right: 8px; cursor: not-allowed;">\n                        <i class="fas fa-eye"></i> Preview Embedded\n                    </span>';l.innerHTML=`\n                    <div class="uploaded-file-info">\n                        <span class="filename">\n                            <i class="fas fa-file-pdf" style="color: #d32f2f; margin-right: 5px;"></i>\n                            ${r}\n                        </span>\n                        <span class="file-status uploaded">\n                            <i class="fas fa-check-circle" style="color: #4caf50; margin-right: 5px;"></i>\n                            Uploaded successfully\n                        </span>\n                        <span class="storage-info" style="color: #666; font-size: 12px;">Storage: ${n}</span>\n                        <div class="file-actions" style="margin-top: 10px;">\n                            ${d}\n                            <button type="button" class="button change-file-btn" onclick="this.parentNode.parentNode.parentNode.querySelector('#pdf-file').click();">\n                                <i class="fas fa-exchange-alt"></i> Change File\n                            </button>\n                        </div>\n                    </div>\n                `,console.log("[StudioEditor] showUploadedFileState - File info updated to uploaded state"),console.log("[StudioEditor] showUploadedFileState - Can preview:",s),console.log("[StudioEditor] showUploadedFileState - Preview URL:",i)}if(n){let i="";"open_edx_contentstore"===t&&o?i=`\n                        <div class="uploaded-file-details">\n                            <i class="fas fa-check-circle" style="color: #28a745;"></i>\n                            <span class="upload-status">File uploaded successfully</span>\n                            <div class="asset-url">\n                                <small>Asset URL: <code>${o}</code></small>\n                            </div>\n                        </div>\n                    `:e&&(i=`\n                        <div class="uploaded-file-details">\n                            <i class="fas fa-info-circle" style="color: #17a2b8;"></i>\n                            <span class="upload-status">File configured: ${e}</span>\n                            <div class="storage-method">\n                                <small>Storage: ${storageDisplay}</small>\n                            </div>\n                        </div>\n                    `),n.innerHTML=i,console.log("[StudioEditor] showUploadedFileState - Updated uploaded-file-info element")}s&&(s.innerHTML='<i class="fas fa-exchange-alt"></i> Change PDF File',s.classList.add("change-file"),console.log("[StudioEditor] showUploadedFileState - Upload trigger updated to change mode")),r&&(r.classList.add("file-uploaded"),console.log("[StudioEditor] showUploadedFileState - Drop zone marked as uploaded")),console.log("[StudioEditor] showUploadedFileState - UI state updated successfully")}catch(i){console.error("[StudioEditor] showUploadedFileState - Error updating uploaded state:",i)}}resetToFileSelectionState(){console.log("[StudioEditor] resetToFileSelectionState - Resetting to file selection state");try{const e=this._ensureElement(),t=e.querySelector("#file-info"),o=e.querySelector("#uploaded-file-info"),i=e.querySelector("#upload-trigger"),l=e.querySelector("#drop-zone");t&&(t.innerHTML='<span class="placeholder">No file chosen</span>'),o&&(o.innerHTML=""),i&&(i.innerHTML='<i class="fas fa-cloud-upload-alt"></i> Choose PDF File',i.classList.remove("change-file")),l&&l.classList.remove("file-uploaded"),this.uploadedFile=null,console.log("[StudioEditor] resetToFileSelectionState - Reset completed")}catch(e){console.error("[StudioEditor] resetToFileSelectionState - Error resetting state:",e)}}_setupFormHandlers(){const e=this._ensureElement(),t=e.querySelector("#pdf-submit-options"),o=e.querySelector(".cancel-button");t&&t.addEventListener("click",this.handleFormSubmit),o&&o.addEventListener("click",this.handleCancel),this.form.addEventListener("submit",this.handleFormSubmit)}async handleFormSubmit(e){e.preventDefault(),console.log("[StudioEditor] Form submission started");try{this.setLoadingState(!0);const e=this.collectFormData();console.log("[StudioEditor] Collected form data:",e);const t=this.validateFormData(e);if(!t.isValid)return console.error("[StudioEditor] Form validation failed:",t.errors),void this.showError(`Validation failed: ${t.errors.join(", ")}`);const o=new FormData;o.append("display_name",e.display_name),o.append("pdf_file_name",e.pdf_file_name),o.append("allow_download",e.allow_download),o.append("allow_annotation",e.allow_annotation),e.pdf_url&&o.append("pdf_url",e.pdf_url);const i=this.container.querySelector("#pdf-file");if(i&&i.files&&i.files.length>0){const e=i.files[0];console.log("[StudioEditor] Adding file to FormData:",{name:e.name,size:e.size,type:e.type}),o.append("pdf_file",e)}else console.log("[StudioEditor] No file found in file input"),this.uploadedFile&&(console.log("[StudioEditor] Adding stored file to FormData:",{name:this.uploadedFile.name,size:this.uploadedFile.size,type:this.uploadedFile.type}),o.append("pdf_file",this.uploadedFile));console.log("[StudioEditor] FormData contents:");for(let[n,s]of o.entries())s instanceof File?console.log(`  ${n}: [File] name="${s.name}", size=${s.size}, type="${s.type}"`):console.log(`  ${n}: ${s}`);const l=await this.submitData(o);console.log("[StudioEditor] Submit result:",l),"success"===l.result?(this.showSuccess("Settings saved successfully!"),l.file_uploaded&&(console.log("[StudioEditor] File upload successful:",{fileName:l.file_name,storageMethod:l.storage_method,storagePath:l.storage_path}),this.showUploadedFileState(l.file_name,l.storage_method||"unknown",l.storage_path)),setTimeout((()=>{this.closeEditor()}),1500)):(console.error("[StudioEditor] Submit failed:",l.message),this.showError(l.message||"Failed to save settings"))}catch(t){console.error("[StudioEditor] Form submission error:",t),this.showError(`Error: ${t.message}`)}finally{this.setLoadingState(!1)}}collectFormData(){var e,t,o,i,l,n,s,r;const d=this._ensureElement(),a={};a.display_name=(null==(t=null==(e=d.querySelector("#pdf-display-name"))?void 0:e.value)?void 0:t.trim())||"",a.pdf_file_name=(null==(i=null==(o=d.querySelector("#pdf-file-name"))?void 0:o.value)?void 0:i.trim())||"";const u=d.querySelector("#pdf-allow-download"),c=d.querySelector("#pdf-allow-annotation");return a.allow_download="true"===(null==u?void 0:u.value),a.allow_annotation="true"===(null==c?void 0:c.value),a.display_name||(a.display_name="PDF Viewer",console.log("[StudioEditor] Using default display name: PDF Viewer")),"url"===this.currentTab?a.pdf_url=(null==(n=null==(l=d.querySelector("#pdf-url"))?void 0:l.value)?void 0:n.trim())||"":a.pdf_url="",console.log("[StudioEditor] Collected form data:",{display_name:a.display_name,pdf_file_name:a.pdf_file_name,allow_download:a.allow_download,allow_annotation:a.allow_annotation,pdf_url:a.pdf_url,currentTab:this.currentTab,hasUploadedFile:!!this.uploadedFile,hasFileInput:!!(null==(r=null==(s=d.querySelector("#pdf-file"))?void 0:s.files)?void 0:r.length)}),a}validateFormData(e){var t,o,i,l,n,s,r,d;const a=[];console.log("[StudioEditor] Validating form data:",e);const u=e.pdf_url&&e.pdf_url.trim().length>0,c=this._ensureElement(),h=(null==(o=null==(t=c.querySelector("#pdf-file-asset-key"))?void 0:t.value)?void 0:o.trim())||"",p=(null==(l=null==(i=c.querySelector("#pdf-file-path"))?void 0:i.value)?void 0:l.trim())||"",f=this.uploadedFile||(null==(s=null==(n=this.container.querySelector("#pdf-file"))?void 0:n.files)?void 0:s.length)>0||e.pdf_file_name&&e.pdf_file_name.trim().length>0||h.length>0||p.length>0;if(console.log("[StudioEditor] File validation details:",{hasUploadedFile:!!this.uploadedFile,hasFileInput:!!(null==(d=null==(r=this.container.querySelector("#pdf-file"))?void 0:r.files)?void 0:d.length),hasPdfFileName:!!(e.pdf_file_name&&e.pdf_file_name.trim().length>0),hasAssetKey:!!(h.length>0),hasFilePath:!!(p.length>0),pdfFileName:e.pdf_file_name,assetKey:h,filePath:p}),u||f||a.push("Please provide either a PDF URL or upload a PDF file"),u)try{e.pdf_url.startsWith("data:application/pdf")?console.log("[StudioEditor] Valid data URL detected"):(new URL(e.pdf_url),console.log("[StudioEditor] Valid external URL detected"))}catch(m){a.push("PDF URL is not a valid URL")}return console.log("[StudioEditor] Validation result:",{hasUrl:u,hasFile:f,errors:a,isValid:0===a.length}),{isValid:0===a.length,errors:a}}async submitData(e){try{console.log("[StudioEditor] Submitting data to backend...");const t=this.getCSRFToken();console.log("[StudioEditor] CSRF token found:",!!t);const o={method:"POST",headers:{}};e instanceof FormData?(o.body=e,console.log("[StudioEditor] Using FormData for file upload"),t&&e.append("csrfmiddlewaretoken",t)):(o.headers["Content-Type"]="application/json",o.body=JSON.stringify(e),console.log("[StudioEditor] Using JSON data"),t&&(o.headers["X-CSRFToken"]=t)),console.log("[StudioEditor] Fetch options:",{method:o.method,headers:o.headers,bodyType:e instanceof FormData?"FormData":"JSON"});const i=await fetch(this.runtime.handlerUrl(this.element,"studio_submit"),o);if(console.log("[StudioEditor] Response status:",i.status),console.log("[StudioEditor] Response headers:",Object.fromEntries(i.headers.entries())),!i.ok){const e=await i.text();throw console.error("[StudioEditor] HTTP error response:",e),new Error(`HTTP ${i.status}: ${i.statusText}`)}const l=await i.json();return console.log("[StudioEditor] Parsed response:",l),l}catch(t){throw console.error("[StudioEditor] Submit error:",t),t}}getCSRFToken(){var e,t;return(null==(e=document.querySelector("[name=csrfmiddlewaretoken]"))?void 0:e.value)||(null==(t=document.querySelector("meta[name=csrf-token]"))?void 0:t.content)||this.getCookie("csrftoken")}getCookie(e){let t=null;if(document.cookie&&""!==document.cookie){const o=document.cookie.split(";");for(let i=0;i<o.length;i++){const l=o[i].trim();if(l.substring(0,e.length+1)===e+"="){t=decodeURIComponent(l.substring(e.length+1));break}}}return t}handleCancel(e){e.preventDefault(),console.log("[StudioEditor] Cancel clicked"),this.closeEditor()}closeEditor(){console.log("[StudioEditor] Notifying runtime of cancel event"),this.runtime.notify("cancel"),this.emit("cancel")}setLoadingState(e){const t=this._ensureElement(),o=t.querySelector("#pdf-submit-options"),i=t.querySelector(".cancel-button");o&&(o.disabled=e,o.textContent=e?"Saving...":"Save"),i&&(i.disabled=e)}showError(e){console.error("[StudioEditor] Error:",e),this.showMessage(e,"error")}showSuccess(e){console.log("[StudioEditor] Success:",e),this.showMessage(e,"success")}showMessage(e,t="info"){this._ensureElement().querySelectorAll(".studio-message").forEach((e=>e.remove()));const o=document.createElement("div");o.className=`studio-message studio-message-${t}`,o.innerHTML=`\n            <i class="fas fa-${"error"===t?"exclamation-triangle":"success"===t?"check-circle":"info-circle"}"></i>\n            <span>${e}</span>\n        `,this.form.insertBefore(o,this.form.firstChild),setTimeout((()=>{o.parentNode&&o.remove()}),5e3)}_ensureElement(){var e,t,o,i;console.log("[StudioEditor] _ensureElement - Starting element conversion"),console.log("[StudioEditor] _ensureElement - Element type:",typeof this.element),console.log("[StudioEditor] _ensureElement - Element constructor:",null==(t=null==(e=this.element)?void 0:e.constructor)?void 0:t.name),console.log("[StudioEditor] _ensureElement - Has querySelector:",typeof(null==(o=this.element)?void 0:o.querySelector)),console.log("[StudioEditor] _ensureElement - Is jQuery:",!!(null==(i=this.element)?void 0:i.jquery));let l=this.element;if(!l.querySelector&&l.jquery){console.log("[StudioEditor] _ensureElement - Converting jQuery object to DOM element"),console.log("[StudioEditor] _ensureElement - jQuery object length:",l.length),console.log("[StudioEditor] _ensureElement - jQuery object has get method:","function"==typeof l.get);let e=l[0];console.log("[StudioEditor] _ensureElement - Trying element[0]:",e),e&&e.nodeType===Node.ELEMENT_NODE||(e=l.get(0),console.log("[StudioEditor] _ensureElement - Trying element.get(0):",e)),e&&e.nodeType===Node.ELEMENT_NODE?(l=e,console.log("[StudioEditor] _ensureElement - Successfully converted jQuery to DOM element")):(console.error("[StudioEditor] _ensureElement - Failed to convert jQuery object to DOM element"),console.error("[StudioEditor] _ensureElement - domElement:",e),console.error("[StudioEditor] _ensureElement - domElement nodeType:",null==e?void 0:e.nodeType))}if(!l.querySelector){console.log("[StudioEditor] _ensureElement - Element still lacks querySelector, trying _ensureDOMElement");try{l=this._ensureDOMElement(this.element),console.log("[StudioEditor] _ensureElement - _ensureDOMElement successful")}catch(n){throw console.error("[StudioEditor] _ensureElement - _ensureDOMElement failed:",n),n}}if(!l||"function"!=typeof l.querySelector)throw console.error("[StudioEditor] _ensureElement - Final element is invalid"),console.error("[StudioEditor] _ensureElement - Final element:",l),console.error("[StudioEditor] _ensureElement - Final element type:",typeof l),new Error("Could not convert element to a valid DOM element with querySelector method");return console.log("[StudioEditor] _ensureElement - Successfully got DOM element"),l}}window.PdfxXBlockEdit=function(e,o){return new t(e,o)}}();
//# sourceMappingURL=pdfx-edit.js.map
