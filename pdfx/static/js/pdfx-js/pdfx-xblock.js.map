{"version":3,"file":"pdfx-xblock.js","sources":["../modern/src/utils/EventEmitter.js","../modern/src/core/PDFManager.js","../modern/src/tools/base/BaseTool.js","../modern/src/tools/scribble/ScribbleTool.js","../modern/src/tools/highlight/HighlightTool.js","../modern/src/tools/text/TextTool.js","../modern/src/tools/shape/ShapeTool.js","../modern/src/tools/note/NoteTool.js","../modern/src/tools/ToolManager.js","../modern/src/ui/UIManager.js","../modern/src/storage/AnnotationStorage.js","../modern/src/PdfxXBlock.js"],"sourcesContent":["/**\n * EventEmitter - Simple event emitter implementation\n *\n * Provides event-based communication between different components\n */\n\nexport class EventEmitter {\n    constructor() {\n        this.events = new Map();\n    }\n\n    /**\n     * Register an event listener\n     * @param {string} event - Event name\n     * @param {Function} listener - Event listener function\n     * @param {Object} options - Options (once: boolean)\n     */\n    on(event, listener, options = {}) {\n        if (typeof listener !== 'function') {\n            throw new Error('Listener must be a function');\n        }\n\n        if (!this.events.has(event)) {\n            this.events.set(event, []);\n        }\n\n        const listenerData = {\n            listener,\n            once: options.once || false\n        };\n\n        this.events.get(event).push(listenerData);\n\n        return this;\n    }\n\n    /**\n     * Register a one-time event listener\n     * @param {string} event - Event name\n     * @param {Function} listener - Event listener function\n     */\n    once(event, listener) {\n        return this.on(event, listener, { once: true });\n    }\n\n    /**\n     * Remove an event listener\n     * @param {string} event - Event name\n     * @param {Function} listener - Event listener function to remove\n     */\n    off(event, listener) {\n        if (!this.events.has(event)) {\n            return this;\n        }\n\n        const listeners = this.events.get(event);\n        const index = listeners.findIndex(l => l.listener === listener);\n\n        if (index !== -1) {\n            listeners.splice(index, 1);\n\n            // Clean up empty event arrays\n            if (listeners.length === 0) {\n                this.events.delete(event);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Emit an event\n     * @param {string} event - Event name\n     * @param {...any} args - Arguments to pass to listeners\n     */\n    emit(event, ...args) {\n        if (!this.events.has(event)) {\n            return false;\n        }\n\n        const listeners = this.events.get(event).slice(); // Copy to avoid issues if modified during emit\n        let hadListeners = false;\n\n        for (const listenerData of listeners) {\n            hadListeners = true;\n\n            try {\n                listenerData.listener.apply(this, args);\n            } catch (error) {\n                console.error(`Error in event listener for '${event}':`, error);\n            }\n\n            // Remove one-time listeners\n            if (listenerData.once) {\n                this.off(event, listenerData.listener);\n            }\n        }\n\n        return hadListeners;\n    }\n\n    /**\n     * Get all event names that have listeners\n     */\n    eventNames() {\n        return Array.from(this.events.keys());\n    }\n\n    /**\n     * Get the number of listeners for an event\n     * @param {string} event - Event name\n     */\n    listenerCount(event) {\n        return this.events.has(event) ? this.events.get(event).length : 0;\n    }\n\n    /**\n     * Get all listeners for an event\n     * @param {string} event - Event name\n     */\n    listeners(event) {\n        if (!this.events.has(event)) {\n            return [];\n        }\n\n        return this.events.get(event).map(l => l.listener);\n    }\n\n    /**\n     * Remove all listeners for an event, or all listeners for all events\n     * @param {string} [event] - Event name (optional)\n     */\n    removeAllListeners(event) {\n        if (event) {\n            this.events.delete(event);\n        } else {\n            this.events.clear();\n        }\n\n        return this;\n    }\n\n    /**\n     * Set the maximum number of listeners for an event (for debugging)\n     * @param {number} n - Maximum number of listeners\n     */\n    setMaxListeners(n) {\n        this.maxListeners = n;\n        return this;\n    }\n\n    /**\n     * Get the maximum number of listeners\n     */\n    getMaxListeners() {\n        return this.maxListeners || 10;\n    }\n}\n\nexport default EventEmitter;","/**\n * PDFManager - Handles PDF document loading, rendering, and page navigation\n *\n * Uses PDF.js v5.0.375 for modern PDF handling\n */\n\nimport { EventEmitter } from '../utils/EventEmitter.js';\n\nexport class PDFManager extends EventEmitter {\n    constructor(options = {}) {\n        super();\n\n        this.blockId = options.blockId;\n        this.container = options.container;\n        this.pdfUrl = options.pdfUrl;\n        this.currentPage = options.currentPage || 1;\n\n        // PDF.js related\n        this.pdfDocument = null;\n        this.loadingTask = null;\n\n        // Rendering state\n        this.scale = 1.0;\n        this.rotation = 0;\n        this.renderContext = null;\n\n        // Canvas elements\n        this.canvas = null;\n        this.context = null;\n        this.textLayer = null;\n\n        // State\n        this.isLoading = false;\n        this.isDocumentLoaded = false;\n\n        // Initialize PDF.js\n        this._initializePDFJS();\n    }\n\n    /**\n     * Initialize PDF.js library\n     */\n    _initializePDFJS() {\n        // Check if PDF.js is available\n        if (typeof pdfjsLib === 'undefined') {\n            console.error('[PDFManager] PDF.js library not loaded');\n            this.emit('error', new Error('PDF.js library not loaded'));\n            return;\n        }\n\n        // Set worker source to latest version 5.0.375\n        if (!pdfjsLib.GlobalWorkerOptions.workerSrc) {\n            pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/5.0.375/pdf.worker.min.mjs';\n            console.debug('[PDFManager] Set PDF.js worker source to v5.0.375');\n        }\n\n        // Configure PDF.js\n        pdfjsLib.GlobalWorkerOptions.verbosity = pdfjsLib.VerbosityLevel.WARNINGS;\n    }\n\n    /**\n     * Load a PDF document\n     * @param {string} url - PDF URL\n     */\n    async loadDocument(url) {\n        if (this.isLoading) {\n            console.warn('[PDFManager] Already loading a document');\n            return;\n        }\n\n        if (!url) {\n            const error = new Error('No PDF URL provided');\n            this.emit('error', error);\n            throw error;\n        }\n\n        this.isLoading = true;\n        this.pdfUrl = url;\n\n        try {\n            console.debug(`[PDFManager] Loading PDF from: ${url}`);\n\n            // Clean up previous document\n            if (this.pdfDocument) {\n                await this._cleanupDocument();\n            }\n\n            // Configure loading parameters for PDF.js 5.0.375\n            const loadingParams = {\n                url: this._getSafePdfUrl(url),\n                cMapUrl: 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/5.0.375/',\n                cMapPacked: true,\n                enableXfa: true,\n                disableAutoFetch: false,\n                disableStream: false,\n                disableRange: false\n            };\n\n            // Start loading\n            this.loadingTask = pdfjsLib.getDocument(loadingParams);\n\n            // Handle loading progress\n            this.loadingTask.onProgress = (progress) => {\n                this.emit('loadProgress', {\n                    loaded: progress.loaded,\n                    total: progress.total,\n                    percent: progress.total ? Math.round((progress.loaded / progress.total) * 100) : 0\n                });\n            };\n\n            // Wait for document to load\n            this.pdfDocument = await this.loadingTask.promise;\n\n            this.isLoading = false;\n            this.isDocumentLoaded = true;\n\n            console.debug(`[PDFManager] PDF loaded successfully. Pages: ${this.pdfDocument.numPages}`);\n\n            // Set up canvas and rendering context\n            this._setupCanvas();\n\n            // Emit document loaded event\n            this.emit('documentLoaded', {\n                document: this.pdfDocument,\n                numPages: this.pdfDocument.numPages,\n                title: await this._getDocumentTitle(),\n                metadata: await this._getDocumentMetadata()\n            });\n\n            console.debug('[PDFManager] documentLoaded event emitted, rendering current page...');\n            // Render the current page\n            await this.renderPage(this.currentPage);\n\n            // BULLETPROOF FIX: Force hide loading indicators and show main content\n            console.debug('[PDFManager] 🔥 BULLETPROOF FIX: Force hiding all loading indicators...');\n\n            // Hide all possible loading indicators\n            const loadingSelectors = [\n                '.loading-indicator',\n                '.loading-spinner',\n                '.loading-text',\n                '#loading-indicator',\n                '#loading-spinner',\n                '#loading-text',\n                `#pdf-loading-${this.blockId}`,\n                `#loading-${this.blockId}`,\n                '[class*=\"loading\"]'\n            ];\n\n            loadingSelectors.forEach(selector => {\n                const elements = document.querySelectorAll(selector);\n                elements.forEach(element => {\n                    element.style.display = 'none';\n                    element.style.visibility = 'hidden';\n                    element.style.opacity = '0';\n                    console.debug(`[PDFManager] ✅ Hidden loading element: ${element.className || element.id}`);\n                });\n            });\n\n            // Force show main PDF content containers\n            const mainSelectors = [\n                `#pdf-main-${this.blockId}`,\n                `#pdf-container-${this.blockId}`,\n                '.pdf-main-container',\n                '.pdf-container'\n            ];\n\n            mainSelectors.forEach(selector => {\n                const elements = document.querySelectorAll(selector);\n                elements.forEach(element => {\n                    element.style.display = 'block';\n                    element.style.visibility = 'visible';\n                    element.style.opacity = '1';\n                    console.debug(`[PDFManager] ✅ Shown main element: ${element.className || element.id}`);\n                });\n            });\n\n            // BULLETPROOF FIX: Hide highlight containers and elements on load to prevent yellow overlay\n            console.debug('[PDFManager] 🔥 BULLETPROOF FIX: Hiding highlight containers to prevent yellow overlay...');\n\n            const highlightSelectors = [\n                `#highlight-container-${this.blockId}`,\n                '.highlight-container',\n                '.highlight',\n                '.highlight-element',\n                '[class^=\"highlight-\"]',\n                '[id^=\"highlight-container-\"]'\n            ];\n\n            highlightSelectors.forEach(selector => {\n                const elements = document.querySelectorAll(selector);\n                elements.forEach(element => {\n                    element.style.display = 'none';\n                    element.style.visibility = 'hidden';\n                    element.style.opacity = '0';\n                    element.style.backgroundColor = 'transparent';\n                    // Remove any existing yellow background\n                    element.classList.remove('active');\n                    console.debug(`[PDFManager] ✅ Hidden highlight element: ${element.className || element.id}`);\n                });\n            });\n\n            // Also hide any highlight layers\n            const highlightLayerSelectors = [\n                `#highlight-layer-${this.blockId}`,\n                '.highlight-layer',\n                '[id^=\"highlight-layer-\"]'\n            ];\n\n            highlightLayerSelectors.forEach(selector => {\n                const elements = document.querySelectorAll(selector);\n                elements.forEach(element => {\n                    element.style.backgroundColor = 'transparent';\n                    element.style.background = 'none';\n                    console.debug(`[PDFManager] ✅ Made highlight layer transparent: ${element.className || element.id}`);\n                });\n            });\n\n            // DIRECT FIX: Show the main PDF container immediately\n            console.debug('[PDFManager] Directly showing main PDF container...');\n            const mainContainer = document.querySelector(`#pdf-main-${this.blockId}`);\n            if (mainContainer) {\n                mainContainer.style.display = 'block';\n                console.debug('[PDFManager] Main PDF container shown directly');\n\n                // Hide loading indicator\n                const loadingIndicator = document.querySelector(`#pdf-loading-${this.blockId}`);\n                if (loadingIndicator) {\n                    loadingIndicator.style.display = 'none';\n                    console.debug('[PDFManager] Loading indicator hidden');\n                }\n            } else {\n                console.warn('[PDFManager] Main PDF container not found for direct show');\n            }\n\n            console.debug('[PDFManager] loadDocument method completed successfully');\n            return this.pdfDocument;\n\n        } catch (error) {\n            this.isLoading = false;\n            console.error('[PDFManager] Error loading PDF:', error);\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Get safe PDF URL (handle relative paths, etc.)\n     */\n    _getSafePdfUrl(url) {\n        if (!url) return '';\n\n        // Handle asset URLs (Open edX specific)\n        if (url.indexOf('asset-v1') !== -1) {\n            if (!(url.indexOf('http://') === 0 || url.indexOf('https://') === 0)) {\n                if (url.charAt(0) === '/') {\n                    const baseUrl = window.location.protocol + '//' + window.location.host;\n                    return baseUrl + url;\n                }\n            }\n            return url;\n        }\n\n        // Handle relative URLs\n        if (url.charAt(0) === '/') {\n            const baseUrl = window.location.protocol + '//' + window.location.host;\n            return baseUrl + url;\n        }\n\n        // Handle URLs without protocol\n        if (url.indexOf('http://') !== 0 && url.indexOf('https://') !== 0) {\n            return 'https://' + url;\n        }\n\n        return url;\n    }\n\n    /**\n     * Set up canvas elements for rendering\n     */\n    _setupCanvas() {\n        // Find or create canvas\n        this.canvas = this.container.querySelector(`#pdf-canvas-${this.blockId}`);\n        if (!this.canvas) {\n            this.canvas = document.createElement('canvas');\n            this.canvas.id = `pdf-canvas-${this.blockId}`;\n\n            const canvasContainer = this.container.querySelector(`#pdf-container-${this.blockId}`);\n            if (canvasContainer) {\n                canvasContainer.appendChild(this.canvas);\n            }\n        }\n\n        this.context = this.canvas.getContext('2d');\n\n        // Set up text layer container\n        let textLayerContainer = this.container.querySelector(`#text-layer-${this.blockId}`);\n        if (!textLayerContainer) {\n            textLayerContainer = document.createElement('div');\n            textLayerContainer.id = `text-layer-${this.blockId}`;\n            textLayerContainer.className = 'textLayer';\n\n            const canvasContainer = this.container.querySelector(`#pdf-container-${this.blockId}`);\n            if (canvasContainer) {\n                canvasContainer.appendChild(textLayerContainer);\n            }\n        }\n\n        this.textLayer = textLayerContainer;\n    }\n\n    /**\n     * Render a specific page\n     * @param {number} pageNum - Page number (1-based)\n     */\n    async renderPage(pageNum) {\n        console.debug('🔥 [TEST] PDFManager.renderPage called - MY CODE IS LOADED!');\n\n        if (!this.pdfDocument) {\n            throw new Error('No PDF document loaded');\n        }\n\n        if (pageNum < 1 || pageNum > this.pdfDocument.numPages) {\n            throw new Error(`Page number ${pageNum} out of range`);\n        }\n\n        try {\n            console.debug(`[PDFManager] Rendering page ${pageNum}`);\n\n            // Get the page\n            const page = await this.pdfDocument.getPage(pageNum);\n\n            // BULLETPROOF FIX: Ensure proper container sizing before calculating scale\n            const container = this.container.querySelector(`#pdf-container-${this.blockId}`);\n            const viewerArea = this.container.querySelector('.pdf-viewer-area');\n\n            // Force container to have proper dimensions\n            if (container && viewerArea) {\n                const viewerWidth = viewerArea.offsetWidth || viewerArea.clientWidth || 800;\n                const viewerHeight = viewerArea.offsetHeight || viewerArea.clientHeight || 600;\n\n                console.debug(`[PDFManager] 🔧 Container sizing - Viewer: ${viewerWidth}x${viewerHeight}, Container: ${container.offsetWidth}x${container.offsetHeight}`);\n\n                // Ensure container has proper width for fit-width calculation\n                if (container.offsetWidth < 200) {\n                    container.style.width = Math.max(viewerWidth - 40, 600) + 'px';\n                    console.debug(`[PDFManager] 🔧 Fixed container width to: ${container.style.width}`);\n                }\n            }\n\n            // Calculate scale based on container size (default to fit-width)\n            this._calculateOptimalScale(page, 'fit-width');\n\n            console.debug(`[PDFManager] 🔧 Calculated scale: ${this.scale} for fit-width mode`);\n\n            // Get viewport\n            const viewport = page.getViewport({\n                scale: this.scale,\n                rotation: this.rotation\n            });\n\n            console.debug(`[PDFManager] 🔧 Final viewport dimensions: ${viewport.width}x${viewport.height}`);\n\n            // Set canvas dimensions\n            this.canvas.width = viewport.width;\n            this.canvas.height = viewport.height;\n            this.canvas.style.width = viewport.width + 'px';\n            this.canvas.style.height = viewport.height + 'px';\n\n            // Clear canvas\n            this.context.clearRect(0, 0, viewport.width, viewport.height);\n\n            // Render the page\n            const renderContext = {\n                canvasContext: this.context,\n                viewport: viewport,\n                enableWebGL: false,\n                renderInteractiveForms: true\n            };\n\n            const renderTask = page.render(renderContext);\n            await renderTask.promise;\n\n            // Render text layer\n            await this._renderTextLayer(page, viewport);\n\n            // Update current page\n            this.currentPage = pageNum;\n\n            console.debug(`[PDFManager] Page ${pageNum} rendered successfully`);\n\n            // BULLETPROOF FIX: Always show the main container after successful page render\n            setTimeout(() => {\n                const mainContainer = document.querySelector(`#pdf-main-${this.blockId}`);\n                const loadingIndicator = document.querySelector(`#pdf-loading-${this.blockId}`);\n\n                if (mainContainer && mainContainer.style.display === 'none') {\n                    mainContainer.style.display = 'block';\n                    console.debug(`[PDFManager] ✅ Main PDF container shown for block ${this.blockId}`);\n                }\n\n                if (loadingIndicator && loadingIndicator.style.display !== 'none') {\n                    loadingIndicator.style.display = 'none';\n                    console.debug(`[PDFManager] ✅ Loading indicator hidden for block ${this.blockId}`);\n                }\n            }, 100);\n\n            // Emit page rendered event\n            this.emit('pageRendered', {\n                pageNum: pageNum,\n                viewport: viewport,\n                canvas: this.canvas,\n                textLayer: this.textLayer\n            });\n\n            // Emit page changed event\n            this.emit('pageChanged', {\n                pageNum: pageNum,\n                totalPages: this.pdfDocument.numPages,\n                viewport: viewport\n            });\n\n        } catch (error) {\n            console.error(`[PDFManager] Error rendering page ${pageNum}:`, error);\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Render text layer for better text selection and accessibility\n     */\n    async _renderTextLayer(page, viewport) {\n        if (!this.textLayer) return;\n\n        try {\n            // Clear existing text layer\n            this.textLayer.innerHTML = '';\n\n            // Set text layer dimensions\n            this.textLayer.style.width = viewport.width + 'px';\n            this.textLayer.style.height = viewport.height + 'px';\n            this.textLayer.style.position = 'absolute';\n            this.textLayer.style.top = '0';\n            this.textLayer.style.left = '0';\n            this.textLayer.style.pointerEvents = 'none';\n\n            // Get text content\n            const textContent = await page.getTextContent();\n\n            // Render text layer using PDF.js utilities\n            if (typeof pdfjsLib.renderTextLayer !== 'undefined') {\n                const textLayerRender = pdfjsLib.renderTextLayer({\n                    textContent: textContent,\n                    container: this.textLayer,\n                    viewport: viewport,\n                    textDivs: []\n                });\n\n                await textLayerRender.promise;\n            } else {\n                // Fallback: manual text layer rendering\n                this._renderTextLayerManual(textContent, viewport);\n            }\n\n        } catch (error) {\n            console.error('[PDFManager] Error rendering text layer:', error);\n        }\n    }\n\n    /**\n     * Manual text layer rendering (fallback)\n     */\n    _renderTextLayerManual(textContent, viewport) {\n        const textItems = textContent.items;\n\n        for (const item of textItems) {\n            const tx = pdfjsLib.Util.transform(viewport.transform, item.transform);\n            const style = textContent.styles[item.fontName];\n\n            const div = document.createElement('div');\n            div.textContent = item.str;\n            div.style.position = 'absolute';\n            div.style.left = tx[4] + 'px';\n            div.style.top = (viewport.height - tx[5]) + 'px';\n            div.style.fontSize = (tx[0] * style.ascent) + 'px';\n            div.style.fontFamily = style.fontFamily;\n            div.style.color = 'transparent';\n\n            this.textLayer.appendChild(div);\n        }\n    }\n\n    /**\n     * Calculate optimal scale based on container size\n     */\n    _calculateOptimalScale(page, mode = 'fit') {\n        const container = this.container.querySelector(`#pdf-container-${this.blockId}`);\n        if (!container) {\n            console.warn('[PDFManager] Container not found, using default scale 1.0');\n            this.scale = 1.0;\n            return;\n        }\n\n        // Get container dimensions with fallback\n        let containerWidth = container.offsetWidth || container.clientWidth;\n        let containerHeight = container.offsetHeight || container.clientHeight;\n\n        // If container dimensions are still not available, get from parent\n        if (!containerWidth || !containerHeight) {\n            const viewerArea = this.container.querySelector('.pdf-viewer-area');\n            if (viewerArea) {\n                containerWidth = viewerArea.offsetWidth || viewerArea.clientWidth || 800;\n                containerHeight = viewerArea.offsetHeight || viewerArea.clientHeight || 600;\n            } else {\n                containerWidth = 800;\n                containerHeight = 600;\n            }\n        }\n\n        console.debug(`[PDFManager] 🔧 calculateOptimalScale - Container: ${containerWidth}x${containerHeight}, Mode: ${mode}`);\n\n        const viewport = page.getViewport({ scale: 1.0 });\n        const pageWidth = viewport.width;\n        const pageHeight = viewport.height;\n\n        console.debug(`[PDFManager] 🔧 calculateOptimalScale - Page dimensions at scale 1.0: ${pageWidth}x${pageHeight}`);\n\n        if (mode === 'fit-width') {\n            // Calculate scale to fit width with some padding\n            const widthScale = (containerWidth - 40) / pageWidth;\n            this.scale = Math.min(widthScale, 3.0); // Cap at 3x zoom for fit-width\n            this.scale = Math.max(this.scale, 0.5); // Minimum 0.5x zoom\n\n            console.debug(`[PDFManager] 🔧 calculateOptimalScale - Fit-width scale: ${this.scale} (widthScale: ${widthScale})`);\n\n            // Add fit-width class to container\n            container.classList.add('fit-width');\n        } else if (mode === 'fit') {\n            // For 'fit' mode, prioritize fitting width but ensure it doesn't exceed reasonable height\n            const widthScale = (containerWidth - 40) / pageWidth;\n            const heightScale = (containerHeight - 40) / pageHeight;\n\n            // Use width scale as primary, but limit if it would make the page too tall\n            this.scale = widthScale;\n\n            // Only constrain by height if the page would be significantly taller than container\n            const scaledHeight = pageHeight * this.scale;\n            if (scaledHeight > containerHeight * 1.5) {\n                // If scaled height is more than 1.5x container height, use height scale instead\n                this.scale = heightScale;\n            }\n\n            // Apply reasonable limits\n            this.scale = Math.min(this.scale, 2.0); // Cap at 2x zoom\n            this.scale = Math.max(this.scale, 0.3); // Minimum 0.3x zoom\n\n            console.debug(`[PDFManager] 🔧 calculateOptimalScale - Fit scale: ${this.scale} (widthScale: ${widthScale}, heightScale: ${heightScale}, scaledHeight: ${scaledHeight})`);\n\n            // Remove fit-width class from container\n            container.classList.remove('fit-width');\n        }\n\n        console.debug(`[PDFManager] 🔧 calculateOptimalScale - Final scale: ${this.scale}`);\n    }\n\n    /**\n     * Navigate to a specific page\n     */\n    async navigateToPage(pageNum) {\n        console.debug(`[PDFManager] 🔍 DEBUG: navigateToPage called with pageNum: ${pageNum}`);\n        console.debug(`[PDFManager] 🔍 DEBUG: Current page: ${this.currentPage}, Document loaded: ${!!this.pdfDocument}`);\n\n        if (!this.pdfDocument) {\n            console.error(`[PDFManager] 🔍 DEBUG: No PDF document loaded, cannot navigate`);\n            throw new Error('No PDF document loaded');\n        }\n\n        if (pageNum === this.currentPage) {\n            console.debug(`[PDFManager] 🔍 DEBUG: Already on page ${pageNum}, no navigation needed`);\n            return;\n        }\n\n        console.debug(`[PDFManager] 🔍 DEBUG: Calling renderPage with pageNum: ${pageNum}`);\n        await this.renderPage(pageNum);\n    }\n\n    /**\n     * Navigate to next page\n     */\n    async nextPage() {\n        if (this.currentPage < this.getTotalPages()) {\n            await this.navigateToPage(this.currentPage + 1);\n        }\n    }\n\n    /**\n     * Navigate to previous page\n     */\n    async previousPage() {\n        if (this.currentPage > 1) {\n            await this.navigateToPage(this.currentPage - 1);\n        }\n    }\n\n    /**\n     * Set zoom level\n     */\n    async setZoom(scale) {\n        if (!this.pdfDocument) {\n            console.warn('[PDFManager] No document loaded for zoom');\n            return;\n        }\n\n        const page = await this.pdfDocument.getPage(this.currentPage);\n\n        if (typeof scale === 'string') {\n            if (scale === 'fit') {\n                this._calculateOptimalScale(page, 'fit');\n            } else if (scale === 'fit-width') {\n                this._calculateOptimalScale(page, 'fit-width');\n            } else if (scale === 'in') {\n                // Zoom in by 25%\n                this.scale = Math.min(5.0, this.scale * 1.25);\n                console.debug(`[PDFManager] Zoom in: new scale = ${this.scale}`);\n                // Remove fit-width class when using manual zoom\n                const container = this.container.querySelector(`#pdf-container-${this.blockId}`);\n                if (container) {\n                    container.classList.remove('fit-width');\n                }\n            } else if (scale === 'out') {\n                // Zoom out by 20%\n                this.scale = Math.max(0.1, this.scale * 0.8);\n                console.debug(`[PDFManager] Zoom out: new scale = ${this.scale}`);\n                // Remove fit-width class when using manual zoom\n                const container = this.container.querySelector(`#pdf-container-${this.blockId}`);\n                if (container) {\n                    container.classList.remove('fit-width');\n                }\n            }\n        } else {\n            this.scale = Math.max(0.1, Math.min(5.0, scale));\n            // Remove fit-width class when using manual zoom\n            const container = this.container.querySelector(`#pdf-container-${this.blockId}`);\n            if (container) {\n                container.classList.remove('fit-width');\n            }\n        }\n\n        await this.renderPage(this.currentPage);\n    }\n\n    /**\n     * Get current page number\n     */\n    getCurrentPage() {\n        return this.currentPage;\n    }\n\n    /**\n     * Get total number of pages\n     */\n    getTotalPages() {\n        return this.pdfDocument ? this.pdfDocument.numPages : 0;\n    }\n\n    /**\n     * Check if document is loaded\n     */\n    isDocumentLoaded() {\n        return this.isDocumentLoaded;\n    }\n\n    /**\n     * Get document title\n     */\n    async _getDocumentTitle() {\n        if (!this.pdfDocument) return '';\n\n        try {\n            const metadata = await this.pdfDocument.getMetadata();\n            return metadata.info.Title || '';\n        } catch (error) {\n            return '';\n        }\n    }\n\n    /**\n     * Get document metadata\n     */\n    async _getDocumentMetadata() {\n        if (!this.pdfDocument) return {};\n\n        try {\n            const metadata = await this.pdfDocument.getMetadata();\n            return metadata.info || {};\n        } catch (error) {\n            return {};\n        }\n    }\n\n    /**\n     * Clean up document resources\n     */\n    async _cleanupDocument() {\n        if (this.loadingTask) {\n            await this.loadingTask.destroy();\n            this.loadingTask = null;\n        }\n\n        if (this.pdfDocument) {\n            await this.pdfDocument.destroy();\n            this.pdfDocument = null;\n        }\n\n        this.isDocumentLoaded = false;\n    }\n\n    /**\n     * Destroy the PDF manager\n     */\n    async destroy() {\n        console.debug('[PDFManager] Destroying PDF manager');\n\n        await this._cleanupDocument();\n\n        // Clear canvas\n        if (this.context) {\n            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        }\n\n        // Clear text layer\n        if (this.textLayer) {\n            this.textLayer.innerHTML = '';\n        }\n\n        // Remove all event listeners\n        this.removeAllListeners();\n\n        // Clear references\n        this.canvas = null;\n        this.context = null;\n        this.textLayer = null;\n        this.container = null;\n    }\n}\n\nexport default PDFManager;","/**\n * BaseTool - Abstract base class for all annotation tools\n *\n * Provides common functionality and interface for all tools\n */\n\nimport { EventEmitter } from '../../utils/EventEmitter.js';\n\nexport class BaseTool extends EventEmitter {\n    constructor(options = {}) {\n        super();\n\n        this.name = options.name || 'base';\n        this.blockId = options.blockId;\n        this.container = options.container;\n        this.pdfManager = options.pdfManager;\n        this.storageManager = options.storageManager;\n\n        // Tool state\n        this.isEnabled = false;\n        this.isActive = false;\n        this.currentPage = 1;\n\n        // Configuration\n        this.config = {\n            color: options.color || '#FF0000',\n            size: options.size || 5,\n            opacity: options.opacity || 1.0,\n            ...options.config\n        };\n\n        // Annotations for this tool\n        this.annotations = new Map();\n        this.annotationsByPage = new Map();\n\n        // Event handlers\n        this.eventHandlers = new Map();\n\n        // Bind methods\n        this._bindMethods();\n    }\n\n    /**\n     * Initialize the tool\n     * Must be implemented by subclasses\n     */\n    async init() {\n        throw new Error('init() must be implemented by subclass');\n    }\n\n    /**\n     * Enable the tool (make it available but not necessarily active)\n     * Must be implemented by subclasses\n     */\n    enable() {\n        throw new Error('enable() must be implemented by subclass');\n    }\n\n    /**\n     * Disable the tool\n     * Must be implemented by subclasses\n     */\n    disable() {\n        throw new Error('disable() must be implemented by subclass');\n    }\n\n    /**\n     * Activate the tool (make it the active tool)\n     * Must be implemented by subclasses\n     */\n    activate() {\n        throw new Error('activate() must be implemented by subclass');\n    }\n\n    /**\n     * Deactivate the tool\n     * Must be implemented by subclasses\n     */\n    deactivate() {\n        throw new Error('deactivate() must be implemented by subclass');\n    }\n\n    /**\n     * Clean up tool resources\n     * Must be implemented by subclasses\n     */\n    cleanup() {\n        throw new Error('cleanup() must be implemented by subclass');\n    }\n\n    /**\n     * Handle page change\n     * Can be overridden by subclasses\n     */\n    handlePageChange(pageNum) {\n        this.currentPage = pageNum;\n        this._renderAnnotationsForPage(pageNum);\n        this.emit('pageChanged', { pageNum, tool: this.name });\n    }\n\n    /**\n     * Create a new annotation\n     * Can be overridden by subclasses\n     */\n    createAnnotation(data) {\n        const annotation = {\n            id: this._generateAnnotationId(),\n            type: this.name,\n            pageNum: this.currentPage,\n            timestamp: Date.now(),\n            userId: this.storageManager ? this.storageManager.userId : 'anonymous',\n            data: data,\n            config: { ...this.config }\n        };\n\n        this.annotations.set(annotation.id, annotation);\n        this._addAnnotationToPage(annotation);\n\n        this.emit('annotationCreated', annotation);\n\n        return annotation;\n    }\n\n    /**\n     * Update an existing annotation\n     */\n    updateAnnotation(annotationId, data) {\n        const annotation = this.annotations.get(annotationId);\n        if (!annotation) {\n            console.warn(`[${this.name}Tool] Annotation ${annotationId} not found`);\n            return null;\n        }\n\n        annotation.data = { ...annotation.data, ...data };\n        annotation.timestamp = Date.now();\n\n        this.emit('annotationUpdated', annotation);\n\n        return annotation;\n    }\n\n    /**\n     * Delete an annotation\n     */\n    deleteAnnotation(annotationId) {\n        const annotation = this.annotations.get(annotationId);\n        if (!annotation) {\n            console.warn(`[${this.name}Tool] Annotation ${annotationId} not found`);\n            return false;\n        }\n\n        this.annotations.delete(annotationId);\n        this._removeAnnotationFromPage(annotation);\n\n        this.emit('annotationDeleted', annotation);\n\n        return true;\n    }\n\n    /**\n     * Get all annotations for the current page\n     */\n    getAnnotationsForPage(pageNum = this.currentPage) {\n        return this.annotationsByPage.get(pageNum) || [];\n    }\n\n    /**\n     * Get all annotations for this tool\n     */\n    getAllAnnotations() {\n        return Array.from(this.annotations.values());\n    }\n\n    /**\n     * Load annotations from data\n     */\n    async loadAnnotations(annotationsData) {\n        try {\n            for (const [pageNum, pageAnnotations] of Object.entries(annotationsData)) {\n                const page = parseInt(pageNum, 10);\n\n                if (Array.isArray(pageAnnotations)) {\n                    for (const annotationData of pageAnnotations) {\n                        const annotation = {\n                            id: annotationData.id || this._generateAnnotationId(),\n                            type: this.name,\n                            pageNum: page,\n                            timestamp: annotationData.timestamp || Date.now(),\n                            userId: annotationData.userId || 'anonymous',\n                            data: annotationData.data || annotationData,\n                            config: annotationData.config || this.config\n                        };\n\n                        this.annotations.set(annotation.id, annotation);\n                        this._addAnnotationToPage(annotation);\n                    }\n                }\n            }\n\n            // Render annotations for current page\n            this._renderAnnotationsForPage(this.currentPage);\n\n            console.debug(`[${this.name}Tool] Loaded ${this.annotations.size} annotations`);\n\n        } catch (error) {\n            console.error(`[${this.name}Tool] Error loading annotations:`, error);\n        }\n    }\n\n    /**\n     * Export annotations data\n     */\n    exportAnnotations() {\n        const data = {};\n\n        for (const [pageNum, annotations] of this.annotationsByPage) {\n            data[pageNum] = annotations.map(annotation => ({\n                id: annotation.id,\n                type: annotation.type,\n                timestamp: annotation.timestamp,\n                userId: annotation.userId,\n                data: annotation.data,\n                config: annotation.config\n            }));\n        }\n\n        return data;\n    }\n\n    /**\n     * Set tool configuration\n     */\n    setConfig(config) {\n        this.config = { ...this.config, ...config };\n        this.emit('configChanged', { config: this.config, tool: this.name });\n    }\n\n    /**\n     * Get tool configuration\n     */\n    getConfig() {\n        return { ...this.config };\n    }\n\n    /**\n     * Check if tool is enabled\n     */\n    isToolEnabled() {\n        return this.isEnabled;\n    }\n\n    /**\n     * Check if tool is active\n     */\n    isToolActive() {\n        return this.isActive;\n    }\n\n    /**\n     * Add event listener with automatic cleanup\n     */\n    addEventHandler(element, event, handler, options = {}) {\n        if (!element || typeof handler !== 'function') {\n            return;\n        }\n\n        const handlerKey = `${element.id || 'element'}_${event}`;\n\n        // Remove existing handler if present\n        this.removeEventHandler(handlerKey);\n\n        // Add event listener\n        element.addEventListener(event, handler, options);\n\n        // Store for cleanup\n        this.eventHandlers.set(handlerKey, {\n            element,\n            event,\n            handler,\n            options\n        });\n    }\n\n    /**\n     * Remove event handler\n     */\n    removeEventHandler(handlerKey) {\n        const handlerData = this.eventHandlers.get(handlerKey);\n        if (handlerData) {\n            handlerData.element.removeEventListener(\n                handlerData.event,\n                handlerData.handler,\n                handlerData.options\n            );\n            this.eventHandlers.delete(handlerKey);\n        }\n    }\n\n    /**\n     * Remove all event handlers\n     */\n    removeAllEventHandlers() {\n        for (const [key] of this.eventHandlers) {\n            this.removeEventHandler(key);\n        }\n    }\n\n    /**\n     * Add annotation to page index\n     */\n    _addAnnotationToPage(annotation) {\n        if (!this.annotationsByPage.has(annotation.pageNum)) {\n            this.annotationsByPage.set(annotation.pageNum, []);\n        }\n\n        const pageAnnotations = this.annotationsByPage.get(annotation.pageNum);\n        const existingIndex = pageAnnotations.findIndex(a => a.id === annotation.id);\n\n        if (existingIndex !== -1) {\n            pageAnnotations[existingIndex] = annotation;\n        } else {\n            pageAnnotations.push(annotation);\n        }\n    }\n\n    /**\n     * Remove annotation from page index\n     */\n    _removeAnnotationFromPage(annotation) {\n        const pageAnnotations = this.annotationsByPage.get(annotation.pageNum);\n        if (pageAnnotations) {\n            const index = pageAnnotations.findIndex(a => a.id === annotation.id);\n            if (index !== -1) {\n                pageAnnotations.splice(index, 1);\n\n                // Clean up empty page arrays\n                if (pageAnnotations.length === 0) {\n                    this.annotationsByPage.delete(annotation.pageNum);\n                }\n            }\n        }\n    }\n\n    /**\n     * Render annotations for a specific page\n     * Should be overridden by subclasses\n     */\n    _renderAnnotationsForPage(pageNum) {\n        // Default implementation - subclasses should override\n        const annotations = this.getAnnotationsForPage(pageNum);\n        console.debug(`[${this.name}Tool] Rendering ${annotations.length} annotations for page ${pageNum}`);\n    }\n\n    /**\n     * Generate unique annotation ID\n     */\n    _generateAnnotationId() {\n        return `${this.name}_${this.blockId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n\n    /**\n     * Bind methods to preserve context\n     */\n    _bindMethods() {\n        this.handlePageChange = this.handlePageChange.bind(this);\n        this.createAnnotation = this.createAnnotation.bind(this);\n        this.updateAnnotation = this.updateAnnotation.bind(this);\n        this.deleteAnnotation = this.deleteAnnotation.bind(this);\n    }\n\n    /**\n     * Destroy the tool\n     */\n    async destroy() {\n        console.debug(`[${this.name}Tool] Destroying tool`);\n\n        // Cleanup tool-specific resources\n        await this.cleanup();\n\n        // Disable and deactivate\n        if (this.isActive) {\n            this.deactivate();\n        }\n\n        if (this.isEnabled) {\n            this.disable();\n        }\n\n        // Remove all event handlers\n        this.removeAllEventHandlers();\n\n        // Remove all event listeners\n        this.removeAllListeners();\n\n        // Clear annotations\n        this.annotations.clear();\n        this.annotationsByPage.clear();\n\n        // Clear references\n        this.container = null;\n        this.pdfManager = null;\n        this.storageManager = null;\n    }\n}\n\nexport default BaseTool;","/**\n * ScribbleTool - Drawing and scribble functionality using FabricJS v6.6.6\n *\n * Provides free-form drawing capabilities on top of PDF pages\n */\n\nimport { BaseTool } from '../base/BaseTool.js';\n\nexport class ScribbleTool extends BaseTool {\n    constructor(options = {}) {\n        super({\n            name: 'scribble',\n            ...options\n        });\n\n        // FabricJS canvas\n        this.fabricCanvas = null;\n        this.canvasContainer = null;\n\n        // Drawing state\n        this.isDrawing = false;\n        this.currentBrush = null;\n\n        // Configuration\n        this.config = {\n            color: '#FF0000',\n            size: 5,\n            opacity: 1.0,\n            brushType: 'pencil',\n            ...this.config\n        };\n\n        // Page-specific strokes storage\n        this.strokesByPage = new Map();\n\n        // Canvas sizing\n        this.canvasWidth = 0;\n        this.canvasHeight = 0;\n    }\n\n    /**\n     * Initialize the scribble tool\n     */\n    async init() {\n        try {\n            console.debug('[ScribbleTool] Initializing scribble tool');\n\n            // Check if FabricJS is available\n            if (typeof fabric === 'undefined') {\n                throw new Error('FabricJS library not loaded');\n            }\n\n            // Set up canvas container\n            await this._setupCanvasContainer();\n\n            // Initialize FabricJS canvas\n            await this._initializeFabricCanvas();\n\n            this.isEnabled = true;\n\n            console.debug('[ScribbleTool] Scribble tool initialized successfully');\n\n        } catch (error) {\n            console.error('[ScribbleTool] Initialization error:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Set up canvas container\n     */\n    async _setupCanvasContainer() {\n        // Find or create draw container\n        let drawContainer = this.container.querySelector(`#draw-container-${this.blockId}`);\n        if (!drawContainer) {\n            drawContainer = document.createElement('div');\n            drawContainer.id = `draw-container-${this.blockId}`;\n            drawContainer.className = 'draw-container';\n            drawContainer.style.position = 'absolute';\n            drawContainer.style.top = '0';\n            drawContainer.style.left = '0';\n            drawContainer.style.pointerEvents = 'none';\n            drawContainer.style.zIndex = '10';\n\n            const pdfContainer = this.container.querySelector(`#pdf-container-${this.blockId}`);\n            if (pdfContainer) {\n                pdfContainer.appendChild(drawContainer);\n            }\n        }\n\n        // Create canvas container within draw container\n        this.canvasContainer = document.createElement('div');\n        this.canvasContainer.className = 'canvas-container';\n        this.canvasContainer.style.position = 'relative';\n        this.canvasContainer.style.width = '100%';\n        this.canvasContainer.style.height = '100%';\n\n        // Clear existing content and add canvas container\n        drawContainer.innerHTML = '';\n        drawContainer.appendChild(this.canvasContainer);\n    }\n\n    /**\n     * Initialize FabricJS canvas\n     */\n    async _initializeFabricCanvas() {\n        // Create canvas element\n        const canvasElement = document.createElement('canvas');\n        canvasElement.id = `fabric-canvas-${this.blockId}`;\n        this.canvasContainer.appendChild(canvasElement);\n\n        // Initialize Fabric canvas\n        this.fabricCanvas = new fabric.Canvas(canvasElement.id, {\n            isDrawingMode: false,\n            selection: false,\n            preserveObjectStacking: true,\n            renderOnAddRemove: true,\n            skipTargetFind: false,\n            interactive: true\n        });\n\n        // Set up drawing brush\n        this._setupDrawingBrush();\n\n        // Set up event listeners\n        this._setupFabricEventListeners();\n\n        // Size the canvas properly\n        await this._resizeCanvas();\n    }\n\n    /**\n     * Set up drawing brush\n     */\n    _setupDrawingBrush() {\n        // Configure pencil brush\n        this.fabricCanvas.freeDrawingBrush = new fabric.PencilBrush(this.fabricCanvas);\n        this.fabricCanvas.freeDrawingBrush.width = this.config.size;\n        this.fabricCanvas.freeDrawingBrush.color = this.config.color;\n\n        this.currentBrush = this.fabricCanvas.freeDrawingBrush;\n    }\n\n    /**\n     * Set up Fabric event listeners\n     */\n    _setupFabricEventListeners() {\n        // Path created event (when drawing is completed)\n        this.fabricCanvas.on('path:created', (event) => {\n            this._handlePathCreated(event);\n        });\n\n        // Drawing started\n        this.fabricCanvas.on('mouse:down', () => {\n            if (this.fabricCanvas.isDrawingMode) {\n                this.isDrawing = true;\n            }\n        });\n\n        // Drawing ended\n        this.fabricCanvas.on('mouse:up', () => {\n            if (this.isDrawing) {\n                this.isDrawing = false;\n            }\n        });\n\n        // Canvas cleared\n        this.fabricCanvas.on('canvas:cleared', () => {\n            this._handleCanvasCleared();\n        });\n    }\n\n    /**\n     * Handle path created event\n     */\n    _handlePathCreated(event) {\n        const path = event.path;\n\n        // Create annotation data\n        const annotationData = {\n            pathData: path.path,\n            strokeWidth: path.strokeWidth,\n            stroke: path.stroke,\n            fill: path.fill || '',\n            left: path.left,\n            top: path.top,\n            scaleX: path.scaleX,\n            scaleY: path.scaleY,\n            angle: path.angle\n        };\n\n        // Create annotation\n        const annotation = this.createAnnotation(annotationData);\n\n        // Store path reference in annotation\n        annotation.fabricPath = path;\n\n        // Add to page strokes\n        this._addStrokeToPage(this.currentPage, annotation);\n\n        console.debug('[ScribbleTool] Path created and saved as annotation:', annotation.id);\n    }\n\n    /**\n     * Handle canvas cleared event\n     */\n    _handleCanvasCleared() {\n        // Clear annotations for current page\n        const pageAnnotations = this.getAnnotationsForPage(this.currentPage);\n        for (const annotation of pageAnnotations) {\n            this.deleteAnnotation(annotation.id);\n        }\n\n        // Clear page strokes\n        this.strokesByPage.delete(this.currentPage);\n    }\n\n    /**\n     * Enable the tool\n     */\n    enable() {\n        this.isEnabled = true;\n        console.debug('[ScribbleTool] Scribble tool enabled');\n    }\n\n    /**\n     * Disable the tool\n     */\n    disable() {\n        if (this.isActive) {\n            this.deactivate();\n        }\n        this.isEnabled = false;\n        console.debug('[ScribbleTool] Scribble tool disabled');\n    }\n\n    /**\n     * Activate the tool\n     */\n    activate() {\n        if (!this.isEnabled) {\n            console.warn('[ScribbleTool] Cannot activate disabled tool');\n            return false;\n        }\n\n        try {\n            // Enable drawing mode\n            this.fabricCanvas.isDrawingMode = true;\n            this.fabricCanvas.selection = false;\n\n            // Update cursor\n            this.fabricCanvas.defaultCursor = 'crosshair';\n            this.fabricCanvas.freeDrawingCursor = 'crosshair';\n\n            // Enable pointer events on draw container\n            const drawContainer = this.container.querySelector(`#draw-container-${this.blockId}`);\n            if (drawContainer) {\n                drawContainer.style.pointerEvents = 'auto';\n                drawContainer.classList.add('active');\n            }\n\n            // Ensure canvas is properly sized\n            this._resizeCanvas();\n\n            this.isActive = true;\n\n            console.debug('[ScribbleTool] Scribble tool activated');\n\n            return true;\n\n        } catch (error) {\n            console.error('[ScribbleTool] Error activating tool:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Deactivate the tool\n     */\n    deactivate() {\n        try {\n            // Disable drawing mode\n            if (this.fabricCanvas) {\n                this.fabricCanvas.isDrawingMode = false;\n                this.fabricCanvas.defaultCursor = 'default';\n            }\n\n            // Disable pointer events on draw container\n            const drawContainer = this.container.querySelector(`#draw-container-${this.blockId}`);\n            if (drawContainer) {\n                drawContainer.style.pointerEvents = 'none';\n                drawContainer.classList.remove('active');\n            }\n\n            this.isActive = false;\n\n            console.debug('[ScribbleTool] Scribble tool deactivated');\n\n        } catch (error) {\n            console.error('[ScribbleTool] Error deactivating tool:', error);\n        }\n    }\n\n    /**\n     * Handle page change\n     */\n    handlePageChange(pageNum) {\n        super.handlePageChange(pageNum);\n\n        // Clear canvas\n        if (this.fabricCanvas) {\n            this.fabricCanvas.clear();\n        }\n\n        // Load strokes for new page\n        this._renderStrokesForPage(pageNum);\n\n        // Resize canvas for new page\n        this._resizeCanvas();\n    }\n\n    /**\n     * Resize canvas to match PDF page\n     */\n    async _resizeCanvas() {\n        if (!this.fabricCanvas || !this.pdfManager) {\n            return;\n        }\n\n        try {\n            // Get PDF container dimensions\n            const pdfContainer = this.container.querySelector(`#pdf-container-${this.blockId}`);\n            if (!pdfContainer) {\n                console.warn('[ScribbleTool] PDF container not found');\n                return;\n            }\n\n            const containerWidth = pdfContainer.offsetWidth || 800;\n            const containerHeight = pdfContainer.offsetHeight || 600;\n\n            // Update canvas dimensions\n            this.canvasWidth = containerWidth;\n            this.canvasHeight = containerHeight;\n\n            // Resize Fabric canvas\n            this.fabricCanvas.setDimensions({\n                width: this.canvasWidth,\n                height: this.canvasHeight\n            });\n\n            // Update draw container dimensions\n            const drawContainer = this.container.querySelector(`#draw-container-${this.blockId}`);\n            if (drawContainer) {\n                drawContainer.style.width = this.canvasWidth + 'px';\n                drawContainer.style.height = this.canvasHeight + 'px';\n            }\n\n            // Update canvas container dimensions\n            if (this.canvasContainer) {\n                this.canvasContainer.style.width = this.canvasWidth + 'px';\n                this.canvasContainer.style.height = this.canvasHeight + 'px';\n            }\n\n            console.debug(`[ScribbleTool] Canvas resized to ${this.canvasWidth}x${this.canvasHeight}`);\n\n        } catch (error) {\n            console.error('[ScribbleTool] Error resizing canvas:', error);\n        }\n    }\n\n    /**\n     * Set tool configuration\n     */\n    setConfig(config) {\n        super.setConfig(config);\n\n        // Update brush properties\n        if (this.fabricCanvas && this.fabricCanvas.freeDrawingBrush) {\n            if (config.color) {\n                this.fabricCanvas.freeDrawingBrush.color = config.color;\n            }\n            if (config.size) {\n                this.fabricCanvas.freeDrawingBrush.width = config.size;\n            }\n        }\n    }\n\n    /**\n     * Add stroke to page storage\n     */\n    _addStrokeToPage(pageNum, annotation) {\n        if (!this.strokesByPage.has(pageNum)) {\n            this.strokesByPage.set(pageNum, []);\n        }\n\n        this.strokesByPage.get(pageNum).push(annotation);\n    }\n\n    /**\n     * Render strokes for a specific page\n     */\n    _renderStrokesForPage(pageNum) {\n        const annotations = this.getAnnotationsForPage(pageNum);\n\n        for (const annotation of annotations) {\n            this._renderStrokeFromAnnotation(annotation);\n        }\n\n        console.debug(`[ScribbleTool] Rendered ${annotations.length} strokes for page ${pageNum}`);\n    }\n\n    /**\n     * Render stroke from annotation data\n     */\n    _renderStrokeFromAnnotation(annotation) {\n        try {\n            const data = annotation.data;\n\n            // Create Fabric path object\n            const path = new fabric.Path(data.pathData, {\n                left: data.left || 0,\n                top: data.top || 0,\n                strokeWidth: data.strokeWidth || this.config.size,\n                stroke: data.stroke || this.config.color,\n                fill: data.fill || '',\n                scaleX: data.scaleX || 1,\n                scaleY: data.scaleY || 1,\n                angle: data.angle || 0,\n                selectable: false,\n                evented: false\n            });\n\n            // Add to canvas\n            this.fabricCanvas.add(path);\n\n            // Store reference\n            annotation.fabricPath = path;\n\n        } catch (error) {\n            console.error('[ScribbleTool] Error rendering stroke:', error);\n        }\n    }\n\n    /**\n     * Clear all strokes on current page\n     */\n    clearCurrentPage() {\n        if (this.fabricCanvas) {\n            this.fabricCanvas.clear();\n        }\n\n        // Remove annotations for current page\n        const pageAnnotations = this.getAnnotationsForPage(this.currentPage);\n        for (const annotation of pageAnnotations) {\n            this.deleteAnnotation(annotation.id);\n        }\n\n        this.strokesByPage.delete(this.currentPage);\n    }\n\n    /**\n     * Undo last stroke\n     */\n    undoLastStroke() {\n        const pageAnnotations = this.getAnnotationsForPage(this.currentPage);\n        if (pageAnnotations.length === 0) {\n            return false;\n        }\n\n        // Remove last annotation\n        const lastAnnotation = pageAnnotations[pageAnnotations.length - 1];\n\n        // Remove from canvas\n        if (lastAnnotation.fabricPath) {\n            this.fabricCanvas.remove(lastAnnotation.fabricPath);\n        }\n\n        // Delete annotation\n        this.deleteAnnotation(lastAnnotation.id);\n\n        return true;\n    }\n\n    /**\n     * Load annotations for this tool\n     */\n    async loadAnnotations(annotationsData) {\n        await super.loadAnnotations(annotationsData);\n\n        // Re-render current page after loading\n        this._renderStrokesForPage(this.currentPage);\n    }\n\n    /**\n     * Clean up tool resources\n     */\n    async cleanup() {\n        console.debug('[ScribbleTool] Cleaning up scribble tool');\n\n        if (this.fabricCanvas) {\n            this.fabricCanvas.dispose();\n            this.fabricCanvas = null;\n        }\n\n        // Clear stroke storage\n        this.strokesByPage.clear();\n\n        // Remove canvas container\n        if (this.canvasContainer && this.canvasContainer.parentNode) {\n            this.canvasContainer.parentNode.removeChild(this.canvasContainer);\n        }\n\n        this.canvasContainer = null;\n        this.currentBrush = null;\n    }\n}\n\nexport default ScribbleTool;","/**\n * HighlightTool - Text highlighting functionality\n *\n * Provides text selection and highlighting capabilities\n */\n\nimport { BaseTool } from '../base/BaseTool.js';\n\nexport class HighlightTool extends BaseTool {\n    constructor(options = {}) {\n        super({\n            name: 'highlight',\n            ...options\n        });\n\n        // Text selection state\n        this.isSelecting = false;\n        this.selectionTimeout = null;\n\n        // Configuration\n        this.config = {\n            color: '#FFFF0080', // Yellow with transparency\n            opacity: 0.5,\n            borderRadius: '2px',\n            ...this.config\n        };\n\n        // Highlight elements\n        this.highlightElements = new Map();\n        this.highlightContainer = null;\n    }\n\n    /**\n     * Initialize the highlight tool\n     */\n    async init() {\n        try {\n            console.debug('[HighlightTool] Initializing highlight tool');\n\n            // Set up highlight container\n            await this._setupHighlightContainer();\n\n            this.isEnabled = true;\n\n            console.debug('[HighlightTool] Highlight tool initialized successfully');\n\n        } catch (error) {\n            console.error('[HighlightTool] Initialization error:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Set up highlight container\n     */\n    async _setupHighlightContainer() {\n        // Find or create highlight container\n        let highlightContainer = this.container.querySelector(`#highlight-container-${this.blockId}`);\n        if (!highlightContainer) {\n            highlightContainer = document.createElement('div');\n            highlightContainer.id = `highlight-container-${this.blockId}`;\n            highlightContainer.className = 'highlight-container';\n            highlightContainer.style.position = 'absolute';\n            highlightContainer.style.top = '0';\n            highlightContainer.style.left = '0';\n            highlightContainer.style.pointerEvents = 'none';\n            highlightContainer.style.zIndex = '5';\n\n            // BULLETPROOF FIX: Hide highlight container by default to prevent yellow overlay\n            highlightContainer.style.display = 'none';\n            highlightContainer.style.visibility = 'hidden';\n            highlightContainer.style.opacity = '0';\n            highlightContainer.style.backgroundColor = 'transparent';\n            highlightContainer.style.background = 'none';\n\n            console.debug('[HighlightTool] ✅ BULLETPROOF FIX: Highlight container hidden by default');\n\n            const pdfContainer = this.container.querySelector(`#pdf-container-${this.blockId}`);\n            if (pdfContainer) {\n                pdfContainer.appendChild(highlightContainer);\n            }\n        } else {\n            // BULLETPROOF FIX: Ensure existing highlight container is also hidden\n            highlightContainer.style.display = 'none';\n            highlightContainer.style.visibility = 'hidden';\n            highlightContainer.style.opacity = '0';\n            highlightContainer.style.backgroundColor = 'transparent';\n            highlightContainer.style.background = 'none';\n\n            console.debug('[HighlightTool] ✅ BULLETPROOF FIX: Existing highlight container hidden');\n        }\n\n        this.highlightContainer = highlightContainer;\n    }\n\n    /**\n     * Enable the tool\n     */\n    enable() {\n        this.isEnabled = true;\n        console.debug('[HighlightTool] Highlight tool enabled');\n    }\n\n    /**\n     * Disable the tool\n     */\n    disable() {\n        if (this.isActive) {\n            this.deactivate();\n        }\n        this.isEnabled = false;\n        console.debug('[HighlightTool] Highlight tool disabled');\n    }\n\n    /**\n     * Activate the tool\n     */\n    activate() {\n        if (!this.isEnabled) {\n            console.warn('[HighlightTool] Cannot activate disabled tool');\n            return false;\n        }\n\n        try {\n            // Enable text highlighting\n            this._enableTextHighlighting();\n\n            this.isActive = true;\n\n            console.debug('[HighlightTool] Highlight tool activated');\n\n            return true;\n\n        } catch (error) {\n            console.error('[HighlightTool] Error activating tool:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Deactivate the tool\n     */\n    deactivate() {\n        try {\n            // Disable text highlighting\n            this._disableTextHighlighting();\n\n            // Clear any active selection\n            this._clearSelection();\n\n            this.isActive = false;\n\n            console.debug('[HighlightTool] Highlight tool deactivated');\n\n        } catch (error) {\n            console.error('[HighlightTool] Error deactivating tool:', error);\n        }\n    }\n\n    /**\n     * Enable text highlighting\n     */\n    _enableTextHighlighting() {\n        const textLayer = this.container.querySelector(`#text-layer-${this.blockId}`);\n        if (!textLayer) {\n            console.warn('[HighlightTool] Text layer not found');\n            return;\n        }\n\n        // Make text layer interactive\n        textLayer.style.pointerEvents = 'auto';\n        textLayer.style.userSelect = 'text';\n        textLayer.style.webkitUserSelect = 'text';\n        textLayer.style.MozUserSelect = 'text';\n        textLayer.style.msUserSelect = 'text';\n\n        // Add visual feedback class\n        textLayer.classList.add('highlight-tool-active');\n\n        // Add event listeners\n        this.addEventHandler(textLayer, 'mouseup', this._handleTextSelection.bind(this));\n        this.addEventHandler(textLayer, 'mousedown', this._handleMouseDown.bind(this));\n\n        // Style text spans\n        this._styleTextSpans(textLayer);\n    }\n\n    /**\n     * Disable text highlighting\n     */\n    _disableTextHighlighting() {\n        const textLayer = this.container.querySelector(`#text-layer-${this.blockId}`);\n        if (!textLayer) {\n            return;\n        }\n\n        // Remove interactive properties\n        textLayer.style.pointerEvents = 'none';\n        textLayer.style.userSelect = 'none';\n        textLayer.style.webkitUserSelect = 'none';\n        textLayer.style.MozUserSelect = 'none';\n        textLayer.style.msUserSelect = 'none';\n\n        // Remove visual feedback class\n        textLayer.classList.remove('highlight-tool-active');\n\n        // Remove hover effects from spans\n        this._removeTextSpanStyles(textLayer);\n    }\n\n    /**\n     * Style text spans for highlighting\n     */\n    _styleTextSpans(textLayer) {\n        const spans = textLayer.querySelectorAll('span');\n\n        // Use efficient styling for large documents\n        if (spans.length > 2000) {\n            // Add CSS rule for hover effect\n            const styleId = `highlight-hover-${this.blockId}`;\n            let style = document.getElementById(styleId);\n\n            if (!style) {\n                style = document.createElement('style');\n                style.id = styleId;\n                style.textContent = `\n                    #text-layer-${this.blockId}.highlight-tool-active span:hover {\n                        background-color: rgba(255, 255, 0, 0.2) !important;\n                        border-radius: 2px;\n                        transition: background-color 0.2s ease;\n                    }\n                `;\n                document.head.appendChild(style);\n            }\n        } else {\n            // Style individual spans for smaller documents\n            spans.forEach(span => {\n                span.style.cursor = 'text';\n                span.style.transition = 'background-color 0.2s ease';\n                span.style.borderRadius = '2px';\n                span.classList.add('highlight-selectable');\n            });\n        }\n    }\n\n    /**\n     * Remove text span styles\n     */\n    _removeTextSpanStyles(textLayer) {\n        const spans = textLayer.querySelectorAll('span.highlight-selectable');\n        spans.forEach(span => {\n            span.classList.remove('highlight-selectable');\n            span.style.cursor = '';\n            span.style.transition = '';\n            span.style.borderRadius = '';\n        });\n\n        // Remove CSS rule\n        const styleId = `highlight-hover-${this.blockId}`;\n        const style = document.getElementById(styleId);\n        if (style) {\n            style.remove();\n        }\n    }\n\n    /**\n     * Handle mouse down event\n     */\n    _handleMouseDown(event) {\n        // Clear any existing timeout\n        if (this.selectionTimeout) {\n            clearTimeout(this.selectionTimeout);\n            this.selectionTimeout = null;\n        }\n\n        this.isSelecting = true;\n    }\n\n    /**\n     * Handle text selection\n     */\n    _handleTextSelection(event) {\n        if (!this.isSelecting) {\n            return;\n        }\n\n        // Use debounce to prevent excessive processing\n        if (this.selectionTimeout) {\n            clearTimeout(this.selectionTimeout);\n        }\n\n        this.selectionTimeout = setTimeout(() => {\n            this._processTextSelection();\n            this.isSelecting = false;\n        }, 300);\n    }\n\n    /**\n     * Process the current text selection\n     */\n    _processTextSelection() {\n        const selection = window.getSelection();\n\n        if (!selection || selection.rangeCount === 0) {\n            return;\n        }\n\n        const range = selection.getRangeAt(0);\n\n        if (range.collapsed || !range.toString().trim()) {\n            return;\n        }\n\n        try {\n            // Get selection bounds\n            const selectionData = this._getSelectionData(range);\n\n            if (selectionData) {\n                // Create highlight annotation\n                const annotation = this.createAnnotation(selectionData);\n\n                // Render the highlight\n                this._renderHighlight(annotation);\n\n                console.debug('[HighlightTool] Created highlight:', annotation.id);\n            }\n\n        } catch (error) {\n            console.error('[HighlightTool] Error processing text selection:', error);\n        } finally {\n            // Clear the selection\n            this._clearSelection();\n        }\n    }\n\n    /**\n     * Get selection data from range\n     */\n    _getSelectionData(range) {\n        const textLayer = this.container.querySelector(`#text-layer-${this.blockId}`);\n        if (!textLayer) {\n            return null;\n        }\n\n        const rects = range.getClientRects();\n        if (rects.length === 0) {\n            return null;\n        }\n\n        const textLayerRect = textLayer.getBoundingClientRect();\n        const highlights = [];\n\n        // Convert each rect to relative coordinates\n        for (let i = 0; i < rects.length; i++) {\n            const rect = rects[i];\n\n            highlights.push({\n                left: rect.left - textLayerRect.left,\n                top: rect.top - textLayerRect.top,\n                width: rect.width,\n                height: rect.height\n            });\n        }\n\n        return {\n            text: range.toString().trim(),\n            highlights: highlights,\n            startOffset: range.startOffset,\n            endOffset: range.endOffset,\n            containerInfo: this._getContainerInfo(range)\n        };\n    }\n\n    /**\n     * Get container information for the range\n     */\n    _getContainerInfo(range) {\n        const startContainer = range.startContainer;\n        const endContainer = range.endContainer;\n\n        return {\n            startContainer: startContainer.nodeType === Node.TEXT_NODE ?\n                startContainer.parentElement?.id || '' : startContainer.id || '',\n            endContainer: endContainer.nodeType === Node.TEXT_NODE ?\n                endContainer.parentElement?.id || '' : endContainer.id || '',\n            startOffset: range.startOffset,\n            endOffset: range.endOffset\n        };\n    }\n\n    /**\n     * Render highlight from annotation\n     */\n    _renderHighlight(annotation) {\n        const data = annotation.data;\n\n        if (!data.highlights || data.highlights.length === 0) {\n            return;\n        }\n\n        const highlightElements = [];\n\n        // Create highlight elements for each rect\n        data.highlights.forEach((highlight, index) => {\n            const element = document.createElement('div');\n            element.className = 'highlight-element';\n            element.style.position = 'absolute';\n            element.style.left = highlight.left + 'px';\n            element.style.top = highlight.top + 'px';\n            element.style.width = highlight.width + 'px';\n            element.style.height = highlight.height + 'px';\n            element.style.backgroundColor = this.config.color;\n            element.style.opacity = this.config.opacity;\n            element.style.borderRadius = this.config.borderRadius;\n            element.style.pointerEvents = 'none';\n            element.dataset.annotationId = annotation.id;\n            element.dataset.highlightIndex = index;\n\n            this.highlightContainer.appendChild(element);\n            highlightElements.push(element);\n        });\n\n        // Store elements for later removal\n        this.highlightElements.set(annotation.id, highlightElements);\n    }\n\n    /**\n     * Clear current selection\n     */\n    _clearSelection() {\n        if (window.getSelection) {\n            window.getSelection().removeAllRanges();\n        }\n    }\n\n    /**\n     * Handle page change\n     */\n    handlePageChange(pageNum) {\n        super.handlePageChange(pageNum);\n\n        // Clear current highlights\n        this._clearAllHighlightElements();\n\n        // Render highlights for new page\n        this._renderHighlightsForPage(pageNum);\n    }\n\n    /**\n     * Clear all highlight elements\n     */\n    _clearAllHighlightElements() {\n        if (this.highlightContainer) {\n            this.highlightContainer.innerHTML = '';\n        }\n        this.highlightElements.clear();\n    }\n\n    /**\n     * Render highlights for a specific page\n     */\n    _renderHighlightsForPage(pageNum) {\n        const annotations = this.getAnnotationsForPage(pageNum);\n\n        for (const annotation of annotations) {\n            this._renderHighlight(annotation);\n        }\n\n        console.debug(`[HighlightTool] Rendered ${annotations.length} highlights for page ${pageNum}`);\n    }\n\n    /**\n     * Delete annotation and remove highlight elements\n     */\n    deleteAnnotation(annotationId) {\n        // Remove highlight elements\n        const elements = this.highlightElements.get(annotationId);\n        if (elements) {\n            elements.forEach(element => {\n                if (element.parentNode) {\n                    element.parentNode.removeChild(element);\n                }\n            });\n            this.highlightElements.delete(annotationId);\n        }\n\n        // Call parent delete method\n        return super.deleteAnnotation(annotationId);\n    }\n\n    /**\n     * Set tool configuration\n     */\n    setConfig(config) {\n        super.setConfig(config);\n\n        // Update existing highlights if color changed\n        if (config.color || config.opacity) {\n            this._updateExistingHighlights();\n        }\n    }\n\n    /**\n     * Update existing highlight elements with new styling\n     */\n    _updateExistingHighlights() {\n        for (const elements of this.highlightElements.values()) {\n            elements.forEach(element => {\n                element.style.backgroundColor = this.config.color;\n                element.style.opacity = this.config.opacity;\n            });\n        }\n    }\n\n    /**\n     * Load annotations for this tool\n     */\n    async loadAnnotations(annotationsData) {\n        await super.loadAnnotations(annotationsData);\n\n        // Re-render current page after loading\n        this._renderHighlightsForPage(this.currentPage);\n    }\n\n    /**\n     * Clean up tool resources\n     */\n    async cleanup() {\n        console.debug('[HighlightTool] Cleaning up highlight tool');\n\n        // Clear timeout\n        if (this.selectionTimeout) {\n            clearTimeout(this.selectionTimeout);\n            this.selectionTimeout = null;\n        }\n\n        // Clear highlights\n        this._clearAllHighlightElements();\n\n        // Remove hover style\n        const styleId = `highlight-hover-${this.blockId}`;\n        const style = document.getElementById(styleId);\n        if (style) {\n            style.remove();\n        }\n\n        // Clear references\n        this.highlightContainer = null;\n    }\n}\n\nexport default HighlightTool;","/**\n * TextTool - Text annotation functionality\n *\n * Provides text annotation capabilities\n */\n\nimport { BaseTool } from '../base/BaseTool.js';\n\nexport class TextTool extends BaseTool {\n    constructor(options = {}) {\n        super({\n            name: 'text',\n            ...options\n        });\n    }\n\n    async init() {\n        console.debug('[TextTool] Initializing text tool');\n        this.isEnabled = true;\n    }\n\n    enable() {\n        this.isEnabled = true;\n    }\n\n    disable() {\n        this.isEnabled = false;\n    }\n\n    activate() {\n        this.isActive = true;\n        return true;\n    }\n\n    deactivate() {\n        this.isActive = false;\n    }\n\n    async cleanup() {\n        console.debug('[TextTool] Cleaning up text tool');\n    }\n}\n\nexport default TextTool;","/**\n * ShapeTool - Shape drawing functionality\n *\n * Provides shape drawing capabilities\n */\n\nimport { BaseTool } from '../base/BaseTool.js';\n\nexport class ShapeTool extends BaseTool {\n    constructor(options = {}) {\n        super({\n            name: 'shape',\n            ...options\n        });\n    }\n\n    async init() {\n        console.debug('[ShapeTool] Initializing shape tool');\n        this.isEnabled = true;\n    }\n\n    enable() {\n        this.isEnabled = true;\n    }\n\n    disable() {\n        this.isEnabled = false;\n    }\n\n    activate() {\n        this.isActive = true;\n        return true;\n    }\n\n    deactivate() {\n        this.isActive = false;\n    }\n\n    async cleanup() {\n        console.debug('[ShapeTool] Cleaning up shape tool');\n    }\n}\n\nexport default ShapeTool;","/**\n * NoteTool - Note annotation functionality\n *\n * Provides note and comment capabilities\n */\n\nimport { BaseTool } from '../base/BaseTool.js';\n\nexport class NoteTool extends BaseTool {\n    constructor(options = {}) {\n        super({\n            name: 'note',\n            ...options\n        });\n    }\n\n    async init() {\n        console.debug('[NoteTool] Initializing note tool');\n        this.isEnabled = true;\n    }\n\n    enable() {\n        this.isEnabled = true;\n    }\n\n    disable() {\n        this.isEnabled = false;\n    }\n\n    activate() {\n        this.isActive = true;\n        return true;\n    }\n\n    deactivate() {\n        this.isActive = false;\n    }\n\n    async cleanup() {\n        console.debug('[NoteTool] Cleaning up note tool');\n    }\n}\n\nexport default NoteTool;","/**\n * ToolManager - Manages all annotation tools\n *\n * Handles tool registration, activation, deactivation, and coordination\n */\n\nimport { EventEmitter } from '../utils/EventEmitter.js';\nimport { ScribbleTool } from './scribble/ScribbleTool.js';\nimport { HighlightTool } from './highlight/HighlightTool.js';\nimport { TextTool } from './text/TextTool.js';\nimport { ShapeTool } from './shape/ShapeTool.js';\nimport { NoteTool } from './note/NoteTool.js';\n\nexport class ToolManager extends EventEmitter {\n    constructor(options = {}) {\n        super();\n\n        this.blockId = options.blockId;\n        this.container = options.container;\n        this.pdfManager = options.pdfManager;\n        this.storageManager = options.storageManager;\n        this.allowAnnotation = options.allowAnnotation !== false;\n\n        // Tool instances\n        this.tools = new Map();\n        this.activeTool = null;\n\n        // State\n        this.isInitialized = false;\n\n        // Configuration\n        this.config = {\n            enabledTools: ['scribble', 'highlight', 'text', 'shape', 'note'],\n            defaultTool: null,\n            ...options.config\n        };\n\n        // Bind methods\n        this._bindMethods();\n    }\n\n    /**\n     * Initialize the tool manager\n     */\n    async init() {\n        if (this.isInitialized) {\n            console.warn('[ToolManager] Already initialized');\n            return;\n        }\n\n        if (!this.allowAnnotation) {\n            console.debug('[ToolManager] Annotations disabled, skipping tool initialization');\n            return;\n        }\n\n        try {\n            console.debug('[ToolManager] Initializing tools...');\n\n            // Register all available tools\n            await this._registerTools();\n\n            // Set up event listeners\n            this._setupEventListeners();\n\n            this.isInitialized = true;\n\n            console.debug(`[ToolManager] Initialized with ${this.tools.size} tools`);\n\n            this.emit('initialized', {\n                tools: Array.from(this.tools.keys()),\n                toolManager: this\n            });\n\n        } catch (error) {\n            console.error('[ToolManager] Initialization error:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Register all available tools\n     */\n    async _registerTools() {\n        const toolConfigs = [\n            {\n                name: 'scribble',\n                class: ScribbleTool,\n                enabled: this.config.enabledTools.includes('scribble')\n            },\n            {\n                name: 'highlight',\n                class: HighlightTool,\n                enabled: this.config.enabledTools.includes('highlight')\n            },\n            {\n                name: 'text',\n                class: TextTool,\n                enabled: this.config.enabledTools.includes('text')\n            },\n            {\n                name: 'shape',\n                class: ShapeTool,\n                enabled: this.config.enabledTools.includes('shape')\n            },\n            {\n                name: 'note',\n                class: NoteTool,\n                enabled: this.config.enabledTools.includes('note')\n            }\n        ];\n\n        for (const toolConfig of toolConfigs) {\n            if (toolConfig.enabled) {\n                await this._registerTool(toolConfig.name, toolConfig.class);\n            }\n        }\n    }\n\n    /**\n     * Register a single tool\n     */\n    async _registerTool(name, ToolClass) {\n        try {\n            console.debug(`[ToolManager] Registering ${name} tool`);\n\n            const tool = new ToolClass({\n                name: name,\n                blockId: this.blockId,\n                container: this.container,\n                pdfManager: this.pdfManager,\n                storageManager: this.storageManager\n            });\n\n            // Initialize the tool\n            await tool.init();\n\n            // Set up tool event listeners\n            this._setupToolEventListeners(tool);\n\n            // Store the tool\n            this.tools.set(name, tool);\n\n            console.debug(`[ToolManager] Registered ${name} tool successfully`);\n\n        } catch (error) {\n            console.error(`[ToolManager] Error registering ${name} tool:`, error);\n        }\n    }\n\n    /**\n     * Set up event listeners\n     */\n    _setupEventListeners() {\n        // Listen for PDF page changes\n        if (this.pdfManager) {\n            this.pdfManager.on('pageChanged', (data) => {\n                this.handlePageChange(data.pageNum);\n            });\n        }\n\n        // Listen for keyboard shortcuts\n        this._setupKeyboardShortcuts();\n    }\n\n    /**\n     * Set up tool-specific event listeners\n     */\n    _setupToolEventListeners(tool) {\n        tool.on('annotationCreated', (annotation) => {\n            this.emit('annotationCreated', annotation);\n        });\n\n        tool.on('annotationUpdated', (annotation) => {\n            this.emit('annotationUpdated', annotation);\n        });\n\n        tool.on('annotationDeleted', (annotation) => {\n            this.emit('annotationDeleted', annotation);\n        });\n\n        tool.on('configChanged', (data) => {\n            this.emit('toolConfigChanged', data);\n        });\n    }\n\n    /**\n     * Set up keyboard shortcuts\n     */\n    _setupKeyboardShortcuts() {\n        const shortcuts = {\n            'KeyH': 'highlight',  // H for highlight\n            'KeyM': 'scribble',   // M for marker/scribble\n            'KeyT': 'text',       // T for text\n            'KeyS': 'shape',      // S for shape\n            'KeyN': 'note',       // N for note\n            'Escape': 'deactivate' // ESC to deactivate current tool\n        };\n\n        const handleKeydown = (event) => {\n            // Only handle shortcuts if no input is focused\n            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {\n                return;\n            }\n\n            // Require Ctrl/Cmd key for tool shortcuts\n            if (event.ctrlKey || event.metaKey) {\n                const action = shortcuts[event.code];\n                if (action === 'deactivate') {\n                    this.deactivateCurrentTool();\n                    event.preventDefault();\n                } else if (action && this.tools.has(action)) {\n                    this.activateTool(action);\n                    event.preventDefault();\n                }\n            } else if (event.code === 'Escape') {\n                this.deactivateCurrentTool();\n                event.preventDefault();\n            }\n        };\n\n        document.addEventListener('keydown', handleKeydown);\n\n        // Store for cleanup\n        this._keyboardHandler = handleKeydown;\n    }\n\n    /**\n     * Activate a tool\n     */\n    activateTool(toolName) {\n        const tool = this.tools.get(toolName);\n        if (!tool) {\n            console.warn(`[ToolManager] Tool '${toolName}' not found`);\n            return false;\n        }\n\n        try {\n            // Deactivate current tool if any\n            if (this.activeTool) {\n                this.deactivateCurrentTool();\n            }\n\n            // Activate the new tool\n            tool.activate();\n            this.activeTool = tool;\n\n            console.debug(`[ToolManager] Activated ${toolName} tool`);\n\n            this.emit('toolActivated', {\n                toolName: toolName,\n                tool: tool\n            });\n\n            return true;\n\n        } catch (error) {\n            console.error(`[ToolManager] Error activating ${toolName} tool:`, error);\n            return false;\n        }\n    }\n\n    /**\n     * Deactivate the current tool\n     */\n    deactivateCurrentTool() {\n        if (!this.activeTool) {\n            return false;\n        }\n\n        try {\n            const toolName = this.activeTool.name;\n\n            this.activeTool.deactivate();\n\n            console.debug(`[ToolManager] Deactivated ${toolName} tool`);\n\n            this.emit('toolDeactivated', {\n                toolName: toolName,\n                tool: this.activeTool\n            });\n\n            this.activeTool = null;\n\n            return true;\n\n        } catch (error) {\n            console.error('[ToolManager] Error deactivating current tool:', error);\n            return false;\n        }\n    }\n\n    /**\n     * Get a specific tool\n     */\n    getTool(toolName) {\n        return this.tools.get(toolName);\n    }\n\n    /**\n     * Get all tools\n     */\n    getAllTools() {\n        return Array.from(this.tools.values());\n    }\n\n    /**\n     * Get active tool\n     */\n    getActiveTool() {\n        return this.activeTool;\n    }\n\n    /**\n     * Get active tool name\n     */\n    getActiveToolName() {\n        return this.activeTool ? this.activeTool.name : null;\n    }\n\n    /**\n     * Check if a tool is available\n     */\n    hasToolAvailable(toolName) {\n        return this.tools.has(toolName);\n    }\n\n    /**\n     * Handle page change\n     */\n    handlePageChange(pageNum) {\n        // Notify all tools about page change\n        for (const tool of this.tools.values()) {\n            try {\n                tool.handlePageChange(pageNum);\n            } catch (error) {\n                console.error(`[ToolManager] Error handling page change for ${tool.name}:`, error);\n            }\n        }\n\n        this.emit('pageChanged', { pageNum });\n    }\n\n    /**\n     * Set tool configuration\n     */\n    setToolConfig(toolName, config) {\n        const tool = this.tools.get(toolName);\n        if (tool) {\n            tool.setConfig(config);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Get tool configuration\n     */\n    getToolConfig(toolName) {\n        const tool = this.tools.get(toolName);\n        return tool ? tool.getConfig() : null;\n    }\n\n    /**\n     * Enable a tool\n     */\n    enableTool(toolName) {\n        const tool = this.tools.get(toolName);\n        if (tool) {\n            tool.enable();\n            this.emit('toolEnabled', { toolName, tool });\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Disable a tool\n     */\n    disableTool(toolName) {\n        const tool = this.tools.get(toolName);\n        if (tool) {\n            // Deactivate if currently active\n            if (this.activeTool === tool) {\n                this.deactivateCurrentTool();\n            }\n\n            tool.disable();\n            this.emit('toolDisabled', { toolName, tool });\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Get all annotations from all tools\n     */\n    getAllAnnotations() {\n        const allAnnotations = {};\n\n        for (const [toolName, tool] of this.tools) {\n            const toolAnnotations = tool.exportAnnotations();\n            if (Object.keys(toolAnnotations).length > 0) {\n                allAnnotations[toolName] = toolAnnotations;\n            }\n        }\n\n        return allAnnotations;\n    }\n\n    /**\n     * Load annotations for all tools\n     */\n    async loadAllAnnotations(annotationsData) {\n        const promises = [];\n\n        for (const [toolName, toolData] of Object.entries(annotationsData)) {\n            const tool = this.tools.get(toolName);\n            if (tool) {\n                promises.push(tool.loadAnnotations(toolData));\n            }\n        }\n\n        try {\n            await Promise.all(promises);\n            console.debug('[ToolManager] Loaded annotations for all tools');\n        } catch (error) {\n            console.error('[ToolManager] Error loading annotations:', error);\n        }\n    }\n\n    /**\n     * Clear all annotations\n     */\n    clearAllAnnotations() {\n        for (const tool of this.tools.values()) {\n            tool.annotations.clear();\n            tool.annotationsByPage.clear();\n        }\n\n        this.emit('allAnnotationsCleared');\n    }\n\n    /**\n     * Get tool statistics\n     */\n    getToolStatistics() {\n        const stats = {};\n\n        for (const [toolName, tool] of this.tools) {\n            stats[toolName] = {\n                totalAnnotations: tool.annotations.size,\n                annotationsByPage: Object.fromEntries(tool.annotationsByPage),\n                isEnabled: tool.isToolEnabled(),\n                isActive: tool.isToolActive()\n            };\n        }\n\n        return stats;\n    }\n\n    /**\n     * Bind methods to preserve context\n     */\n    _bindMethods() {\n        this.activateTool = this.activateTool.bind(this);\n        this.deactivateCurrentTool = this.deactivateCurrentTool.bind(this);\n        this.handlePageChange = this.handlePageChange.bind(this);\n    }\n\n    /**\n     * Destroy the tool manager\n     */\n    async destroy() {\n        console.debug('[ToolManager] Destroying tool manager');\n\n        // Deactivate current tool\n        this.deactivateCurrentTool();\n\n        // Destroy all tools\n        const destroyPromises = [];\n        for (const tool of this.tools.values()) {\n            destroyPromises.push(tool.destroy());\n        }\n\n        try {\n            await Promise.all(destroyPromises);\n        } catch (error) {\n            console.error('[ToolManager] Error destroying tools:', error);\n        }\n\n        // Clear tools\n        this.tools.clear();\n\n        // Remove keyboard handler\n        if (this._keyboardHandler) {\n            document.removeEventListener('keydown', this._keyboardHandler);\n            this._keyboardHandler = null;\n        }\n\n        // Remove all event listeners\n        this.removeAllListeners();\n\n        // Clear references\n        this.container = null;\n        this.pdfManager = null;\n        this.storageManager = null;\n        this.activeTool = null;\n\n        this.isInitialized = false;\n    }\n}\n\nexport default ToolManager;","/**\n * UIManager - Manages all user interface components\n *\n * Handles toolbar, navigation, settings, and UI interactions\n */\n\nimport { EventEmitter } from '../utils/EventEmitter.js';\n\nexport class UIManager extends EventEmitter {\n    constructor(options = {}) {\n        super();\n\n        this.blockId = options.blockId;\n        this.container = options.container;\n        this.allowDownload = options.allowDownload !== false;\n        this.isStudio = options.isStudio || false;\n\n        // UI elements\n        this.toolbar = null;\n        this.navigation = null;\n        this.statusBar = null;\n        this.loadingIndicator = null;\n        this.errorDisplay = null;\n\n        // State\n        this.isInitialized = false;\n        this.currentPage = 1;\n        this.totalPages = 0;\n        this.activeToolName = null;\n\n        // Event handlers\n        this.eventHandlers = new Map();\n\n        // Bind methods\n        this._bindMethods();\n    }\n\n    /**\n     * Initialize the UI manager\n     */\n    async init() {\n        if (this.isInitialized) {\n            console.warn('[UIManager] Already initialized');\n            return;\n        }\n\n        try {\n            console.debug('[UIManager] Initializing UI components');\n\n            // Initialize core UI components\n            this._initializeLoadingIndicator();\n            this._initializeErrorDisplay();\n            this._initializeToolbar();\n            this._initializeNavigation();\n            this._initializeStatusBar();\n\n            // Set up event listeners\n            this._setupEventListeners();\n\n            this.isInitialized = true;\n\n            console.debug('[UIManager] UI initialization complete');\n\n            this.emit('initialized', { uiManager: this });\n\n        } catch (error) {\n            console.error('[UIManager] Initialization error:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Initialize loading indicator\n     */\n    _initializeLoadingIndicator() {\n        this.loadingIndicator = this.container.querySelector('.loading-indicator');\n        if (!this.loadingIndicator) {\n            this.loadingIndicator = document.createElement('div');\n            this.loadingIndicator.className = 'loading-indicator';\n            this.loadingIndicator.innerHTML = `\n                <div class=\"loading-spinner\"></div>\n                <div class=\"loading-text\">Loading PDF...</div>\n            `;\n            this.loadingIndicator.style.display = 'block';\n            this.container.appendChild(this.loadingIndicator);\n        }\n    }\n\n    /**\n     * Initialize error display\n     */\n    _initializeErrorDisplay() {\n        this.errorDisplay = this.container.querySelector('.pdf-error');\n        if (!this.errorDisplay) {\n            this.errorDisplay = document.createElement('div');\n            this.errorDisplay.className = 'pdf-error';\n            this.errorDisplay.style.display = 'none';\n            this.errorDisplay.innerHTML = `\n                <div class=\"error-icon\">⚠️</div>\n                <div class=\"error-message\">An error occurred</div>\n                <button class=\"error-retry\">Retry</button>\n            `;\n            this.container.appendChild(this.errorDisplay);\n        }\n\n        // Add retry button handler\n        const retryButton = this.errorDisplay.querySelector('.error-retry');\n        if (retryButton) {\n            this._addEventHandler(retryButton, 'click', () => {\n                this.emit('retryRequested');\n            });\n        }\n    }\n\n    /**\n     * Initialize toolbar\n     */\n    _initializeToolbar() {\n        // Find existing toolbar (now using FontAwesome icons from HTML template)\n        this.toolbar = this.container.querySelector(`#toolbar-${this.blockId}`);\n        if (this.toolbar) {\n            console.debug('[UIManager] Using existing toolbar from HTML template');\n            // Don't recreate - just set up event listeners for existing toolbar\n            this._setupToolbarEvents();\n            return;\n        }\n\n        // Only create fallback if toolbar doesn't exist\n        console.warn('[UIManager] Toolbar not found in template, creating fallback');\n        this.toolbar = document.createElement('div');\n        this.toolbar.id = `toolbar-${this.blockId}`;\n        this.toolbar.className = 'pdf-toolbar';\n\n        // Create toolbar content with FontAwesome icons\n        this.toolbar.innerHTML = this._createToolbarHTML();\n\n        // Insert toolbar at the beginning of main container\n        const mainContainer = this.container.querySelector(`#pdf-main-${this.blockId}`);\n        if (mainContainer) {\n            mainContainer.insertBefore(this.toolbar, mainContainer.firstChild);\n        }\n\n        // Set up toolbar event listeners\n        this._setupToolbarEvents();\n    }\n\n    /**\n     * Create toolbar HTML with FontAwesome icons\n     */\n    _createToolbarHTML() {\n        const tools = [\n            { name: 'highlight', icon: 'fas fa-highlighter', title: 'Highlight Text' },\n            { name: 'scribble', icon: 'fas fa-pen', title: 'Draw/Scribble' },\n            { name: 'text', icon: 'fas fa-font', title: 'Add Text' },\n            { name: 'shape', icon: 'fas fa-shapes', title: 'Draw Shape' },\n            { name: 'note', icon: 'fas fa-sticky-note', title: 'Add Note' }\n        ];\n\n        let toolsHTML = '';\n        for (const tool of tools) {\n            toolsHTML += `\n                <button class=\"tool-button\" data-tool=\"${tool.name}\" title=\"${tool.title}\">\n                    <i class=\"${tool.icon}\"></i>\n                </button>\n            `;\n        }\n\n        return `\n            <div class=\"toolbar-section tools-section\">\n                <div class=\"tool-buttons\">\n                    ${toolsHTML}\n                </div>\n            </div>\n            <div class=\"toolbar-section settings-section\">\n                <div class=\"setting-controls\">\n                    <label for=\"color-input-${this.blockId}\">\n                        <i class=\"fas fa-palette\"></i>\n                    </label>\n                    <input type=\"color\" id=\"color-input-${this.blockId}\" value=\"#FF0000\" class=\"color-picker\">\n                    <label for=\"size-input-${this.blockId}\">\n                        <i class=\"fas fa-expand-arrows-alt\"></i>\n                    </label>\n                    <input type=\"range\" id=\"size-input-${this.blockId}\" min=\"1\" max=\"20\" value=\"5\" class=\"size-slider\">\n                </div>\n            </div>\n            <div class=\"toolbar-section actions-section\">\n                <div class=\"action-buttons\">\n                    <button class=\"action-button\" data-action=\"clear\" title=\"Clear All\">\n                        <i class=\"fas fa-trash\"></i>\n                    </button>\n                    <button class=\"action-button\" data-action=\"undo\" title=\"Undo\">\n                        <i class=\"fas fa-undo\"></i>\n                    </button>\n                    ${this.allowDownload ? '<button class=\"action-button\" data-action=\"download\" title=\"Download PDF\"><i class=\"fas fa-download\"></i></button>' : ''}\n                </div>\n            </div>\n        `;\n    }\n\n    /**\n     * Set up toolbar event listeners\n     */\n    _setupToolbarEvents() {\n        // Tool buttons\n        const toolButtons = this.toolbar.querySelectorAll('.tool-button');\n        toolButtons.forEach(button => {\n            this._addEventHandler(button, 'click', () => {\n                const toolName = button.dataset.tool;\n                this._activateTool(toolName);\n            });\n        });\n\n        // Action buttons\n        const actionButtons = this.toolbar.querySelectorAll('.action-button');\n        actionButtons.forEach(button => {\n            this._addEventHandler(button, 'click', () => {\n                const action = button.dataset.action;\n                this._handleAction(action);\n            });\n        });\n\n        // Color picker\n        const colorPicker = this.toolbar.querySelector('.color-picker');\n        if (colorPicker) {\n            this._addEventHandler(colorPicker, 'change', (event) => {\n                this.emit('colorChanged', { color: event.target.value });\n            });\n        }\n\n        // Size slider\n        const sizeSlider = this.toolbar.querySelector('.size-slider');\n        if (sizeSlider) {\n            this._addEventHandler(sizeSlider, 'input', (event) => {\n                this.emit('sizeChanged', { size: parseInt(event.target.value, 10) });\n            });\n        }\n    }\n\n    /**\n     * Initialize navigation\n     */\n    _initializeNavigation() {\n        console.debug(`[UIManager] 🔍 DEBUG: Initializing navigation for blockId: ${this.blockId}`);\n        console.debug(`[UIManager] 🔍 DEBUG: Container element:`, this.container);\n\n        // Try multiple possible navigation selectors\n        const possibleSelectors = [\n            `#navigation-${this.blockId}`,\n            `.pdf-navigation`,\n            `[id*=\"navigation\"]`,\n            `[class*=\"navigation\"]`\n        ];\n\n        let foundNavigation = null;\n        for (const selector of possibleSelectors) {\n            console.debug(`[UIManager] 🔍 DEBUG: Trying selector: ${selector}`);\n            const element = this.container.querySelector(selector);\n            if (element) {\n                console.debug(`[UIManager] ✅ Found navigation with selector: ${selector}`, element);\n                foundNavigation = element;\n                break;\n            } else {\n                console.debug(`[UIManager] ❌ No element found with selector: ${selector}`);\n            }\n        }\n\n        this.navigation = foundNavigation;\n        console.debug(`[UIManager] 🔍 DEBUG: Final navigation element:`, this.navigation);\n\n        if (this.navigation) {\n            console.debug('[UIManager] Using existing navigation from HTML template');\n            console.debug(`[UIManager] 🔍 DEBUG: Navigation element HTML:`, this.navigation.outerHTML);\n            this._setupNavigationEvents();\n            return;\n        }\n\n        console.warn('[UIManager] Navigation not found in template, creating fallback');\n        this.navigation = document.createElement('div');\n        this.navigation.id = `navigation-${this.blockId}`;\n        this.navigation.className = 'pdf-navigation';\n        this.navigation.innerHTML = `\n            <div class=\"nav-section\">\n                <button class=\"nav-button\" data-nav=\"first\" title=\"First Page\">\n                    <i class=\"fas fa-step-backward\"></i>\n                </button>\n                <button class=\"nav-button\" data-nav=\"prev\" title=\"Previous Page\">\n                    <i class=\"fas fa-chevron-left\"></i>\n                </button>\n                <span class=\"page-info\">\n                    <input type=\"number\" class=\"page-input\" value=\"1\" min=\"1\">\n                    <span class=\"page-separator\">of</span>\n                    <span class=\"total-pages\">1</span>\n                </span>\n                <button class=\"nav-button\" data-nav=\"next\" title=\"Next Page\">\n                    <i class=\"fas fa-chevron-right\"></i>\n                </button>\n                <button class=\"nav-button\" data-nav=\"last\" title=\"Last Page\">\n                    <i class=\"fas fa-step-forward\"></i>\n                </button>\n            </div>\n            <div class=\"zoom-section\">\n                <button class=\"zoom-button\" data-zoom=\"out\" title=\"Zoom Out\">\n                    <i class=\"fas fa-search-minus\"></i>\n                </button>\n                <span class=\"zoom-info\">100%</span>\n                <button class=\"zoom-button\" data-zoom=\"in\" title=\"Zoom In\">\n                    <i class=\"fas fa-search-plus\"></i>\n                </button>\n                <button class=\"zoom-button\" data-zoom=\"fit\" title=\"Fit to Page\">\n                    <i class=\"fas fa-expand\"></i>\n                </button>\n                <button class=\"zoom-button\" data-zoom=\"fit-width\" title=\"Fit Width\">\n                    <i class=\"fas fa-arrows-alt-h\"></i>\n                </button>\n            </div>\n        `;\n\n        const mainContainer = this.container.querySelector(`#pdf-main-${this.blockId}`);\n        const pdfViewerArea = this.container.querySelector('.pdf-viewer-area');\n\n        if (mainContainer && pdfViewerArea) {\n            mainContainer.insertBefore(this.navigation, pdfViewerArea.nextSibling);\n        } else if (mainContainer) {\n            mainContainer.appendChild(this.navigation);\n        }\n\n        this._setupNavigationEvents();\n    }\n\n    /**\n     * Set up navigation event listeners\n     */\n    _setupNavigationEvents() {\n        console.debug(`[UIManager] 🔍 DEBUG: Setting up navigation events for:`, this.navigation);\n\n        if (!this.navigation) {\n            console.error('[UIManager] ❌ Navigation element not found! Cannot set up navigation events.');\n            return;\n        }\n\n        // Navigation buttons\n        const navButtons = this.navigation.querySelectorAll('.nav-button');\n        console.debug(`[UIManager] 🔍 DEBUG: Found ${navButtons.length} navigation buttons:`, navButtons);\n\n        navButtons.forEach((button, index) => {\n            const action = button.dataset.nav;\n            console.debug(`[UIManager] 🔍 DEBUG: Setting up nav button ${index}: action=\"${action}\", element:`, button);\n\n            if (!action) {\n                console.warn(`[UIManager] ⚠️ Button ${index} has no data-nav attribute!`, button);\n                return;\n            }\n\n            // Add visual feedback for debugging\n            button.style.cursor = 'pointer';\n            button.style.userSelect = 'none';\n\n            // Add multiple event types for better compatibility\n            this._addEventHandler(button, 'click', (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                console.debug(`[UIManager] 🚀 Navigation button clicked! Action: ${action}`);\n                console.debug(`[UIManager] 🚀 Current page: ${this.currentPage}, Total: ${this.totalPages}`);\n                this._handleNavigation(action);\n            });\n\n            // Add touch support for mobile\n            this._addEventHandler(button, 'touchend', (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                console.debug(`[UIManager] 🚀 Navigation button touched! Action: ${action}`);\n                this._handleNavigation(action);\n            });\n\n            // Visual feedback\n            this._addEventHandler(button, 'mousedown', () => {\n                button.style.backgroundColor = '#0066cc';\n            });\n\n            this._addEventHandler(button, 'mouseup', () => {\n                button.style.backgroundColor = '';\n            });\n\n            this._addEventHandler(button, 'mouseleave', () => {\n                button.style.backgroundColor = '';\n            });\n        });\n\n        // Page input\n        const pageInput = this.navigation.querySelector('.page-input');\n        console.debug(`[UIManager] 🔍 DEBUG: Found page input:`, pageInput);\n\n        if (pageInput) {\n            this._addEventHandler(pageInput, 'change', (event) => {\n                const pageNum = parseInt(event.target.value, 10);\n                console.debug(`[UIManager] 🔍 DEBUG: Page input changed to: ${pageNum}`);\n                if (pageNum >= 1 && pageNum <= this.totalPages) {\n                    console.debug(`[UIManager] 🚀 Emitting pageNavigationRequested for input: ${pageNum}`);\n                    this.emit('pageNavigationRequested', { pageNum });\n                } else {\n                    console.warn(`[UIManager] ⚠️ Page ${pageNum} out of range (1-${this.totalPages})`);\n                    // Reset to current page if invalid\n                    event.target.value = this.currentPage;\n                }\n            });\n\n            this._addEventHandler(pageInput, 'keypress', (event) => {\n                if (event.key === 'Enter') {\n                    const pageNum = parseInt(event.target.value, 10);\n                    console.debug(`[UIManager] 🔍 DEBUG: Page input Enter pressed: ${pageNum}`);\n                    if (pageNum >= 1 && pageNum <= this.totalPages) {\n                        console.debug(`[UIManager] 🚀 Emitting pageNavigationRequested for Enter: ${pageNum}`);\n                        this.emit('pageNavigationRequested', { pageNum });\n                    }\n                }\n            });\n        }\n\n        // Zoom buttons\n        const zoomButtons = this.navigation.querySelectorAll('.zoom-button');\n        console.debug(`[UIManager] 🔍 DEBUG: Found ${zoomButtons.length} zoom buttons:`, zoomButtons);\n\n        zoomButtons.forEach((button, index) => {\n            const action = button.dataset.zoom;\n            console.debug(`[UIManager] 🔍 DEBUG: Setting up zoom button ${index}: action=\"${action}\", element:`, button);\n\n            if (!action) {\n                console.warn(`[UIManager] ⚠️ Zoom button ${index} has no data-zoom attribute!`, button);\n                return;\n            }\n\n            // Add visual feedback for debugging\n            button.style.cursor = 'pointer';\n            button.style.userSelect = 'none';\n\n            this._addEventHandler(button, 'click', (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                console.debug(`[UIManager] 🚀 Zoom button clicked! Action: ${action}`);\n                this._handleZoom(action);\n            });\n\n            // Add touch support\n            this._addEventHandler(button, 'touchend', (event) => {\n                event.preventDefault();\n                event.stopPropagation();\n                console.debug(`[UIManager] 🚀 Zoom button touched! Action: ${action}`);\n                this._handleZoom(action);\n            });\n\n            // Visual feedback\n            this._addEventHandler(button, 'mousedown', () => {\n                button.style.backgroundColor = '#0066cc';\n            });\n\n            this._addEventHandler(button, 'mouseup', () => {\n                button.style.backgroundColor = '';\n            });\n\n            this._addEventHandler(button, 'mouseleave', () => {\n                button.style.backgroundColor = '';\n            });\n        });\n\n        // Add debugging info to the DOM\n        if (this.navigation) {\n            this.navigation.setAttribute('data-debug-events', 'true');\n            this.navigation.setAttribute('data-nav-buttons', navButtons.length.toString());\n            this.navigation.setAttribute('data-zoom-buttons', zoomButtons.length.toString());\n            console.debug(`[UIManager] ✅ Navigation events setup complete. Nav buttons: ${navButtons.length}, Zoom buttons: ${zoomButtons.length}`);\n        }\n    }\n\n    /**\n     * Initialize status bar\n     */\n    _initializeStatusBar() {\n        this.statusBar = this.container.querySelector(`#status-bar-${this.blockId}`);\n        if (this.statusBar) {\n            console.debug('[UIManager] Using existing status bar from HTML template');\n            // Don't recreate - status bar already exists in template\n            return;\n        }\n\n        // Only create fallback if status bar doesn't exist\n        console.warn('[UIManager] Status bar not found in template, creating fallback');\n        this.statusBar = document.createElement('div');\n        this.statusBar.id = `status-bar-${this.blockId}`;\n        this.statusBar.className = 'pdf-status-bar';\n        this.statusBar.innerHTML = `\n            <div class=\"status-section\">\n                <span class=\"status-text\">Ready</span>\n            </div>\n            <div class=\"tool-status\">\n                <span class=\"active-tool-label\">No tool active</span>\n            </div>\n        `;\n\n        const mainContainer = this.container.querySelector(`#pdf-main-${this.blockId}`);\n        if (mainContainer) {\n            mainContainer.appendChild(this.statusBar);\n        } else {\n            this.container.appendChild(this.statusBar);\n        }\n    }\n\n    /**\n     * Set up event listeners\n     */\n    _setupEventListeners() {\n        // Global keyboard shortcuts\n        this._addEventHandler(document, 'keydown', this._handleKeyboardShortcuts.bind(this));\n    }\n\n    /**\n     * Handle keyboard shortcuts\n     */\n    _handleKeyboardShortcuts(event) {\n        // Only handle shortcuts when not typing in inputs\n        if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA') {\n            return;\n        }\n\n        // Page navigation shortcuts\n        if (event.key === 'ArrowLeft' || event.key === 'PageUp') {\n            this._handleNavigation('prev');\n            event.preventDefault();\n        } else if (event.key === 'ArrowRight' || event.key === 'PageDown') {\n            this._handleNavigation('next');\n            event.preventDefault();\n        } else if (event.key === 'Home') {\n            this._handleNavigation('first');\n            event.preventDefault();\n        } else if (event.key === 'End') {\n            this._handleNavigation('last');\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * Activate a tool\n     */\n    _activateTool(toolName) {\n        this.emit('toolRequested', { toolName });\n    }\n\n    /**\n     * Handle action buttons\n     */\n    _handleAction(action) {\n        switch (action) {\n            case 'clear':\n                this.emit('clearRequested');\n                break;\n            case 'undo':\n                this.emit('undoRequested');\n                break;\n            case 'download':\n                this.emit('downloadRequested');\n                break;\n        }\n    }\n\n    /**\n     * Handle navigation actions\n     */\n    _handleNavigation(action) {\n        console.debug(`[UIManager] 🔍 DEBUG: _handleNavigation called with action: ${action}`);\n        console.debug(`[UIManager] 🔍 DEBUG: Current page: ${this.currentPage}, Total pages: ${this.totalPages}`);\n\n        if (this.totalPages === 0) {\n            console.warn('[UIManager] ⚠️ No pages available for navigation');\n            return;\n        }\n\n        let targetPage = this.currentPage;\n\n        switch (action) {\n            case 'first':\n                targetPage = 1;\n                console.debug(`[UIManager] 🔍 DEBUG: Navigate to first page: ${targetPage}`);\n                break;\n            case 'prev':\n                targetPage = Math.max(1, this.currentPage - 1);\n                console.debug(`[UIManager] 🔍 DEBUG: Navigate to previous page: ${targetPage} (from ${this.currentPage})`);\n                break;\n            case 'next':\n                targetPage = Math.min(this.totalPages, this.currentPage + 1);\n                console.debug(`[UIManager] 🔍 DEBUG: Navigate to next page: ${targetPage} (from ${this.currentPage})`);\n                break;\n            case 'last':\n                targetPage = this.totalPages;\n                console.debug(`[UIManager] 🔍 DEBUG: Navigate to last page: ${targetPage}`);\n                break;\n            default:\n                console.warn(`[UIManager] ⚠️ Unknown navigation action: ${action}`);\n                return;\n        }\n\n        console.debug(`[UIManager] 🔍 DEBUG: Target page calculated: ${targetPage}`);\n\n        // Validate target page\n        if (targetPage < 1 || targetPage > this.totalPages) {\n            console.error(`[UIManager] ❌ Target page ${targetPage} is out of bounds (1-${this.totalPages})`);\n            return;\n        }\n\n        if (targetPage !== this.currentPage) {\n            console.debug(`[UIManager] 🚀 Emitting pageNavigationRequested event with pageNum: ${targetPage}`);\n            this.emit('pageNavigationRequested', { pageNum: targetPage });\n\n            // Update button states immediately for better UX\n            this._updateNavigationButtonStates(targetPage);\n        } else {\n            console.debug(`[UIManager] 🔍 DEBUG: Target page same as current page, no navigation needed`);\n        }\n    }\n\n    /**\n     * Update navigation button states\n     */\n    _updateNavigationButtonStates(currentPage = this.currentPage) {\n        if (!this.navigation) return;\n\n        const firstBtn = this.navigation.querySelector('[data-nav=\"first\"]');\n        const prevBtn = this.navigation.querySelector('[data-nav=\"prev\"]');\n        const nextBtn = this.navigation.querySelector('[data-nav=\"next\"]');\n        const lastBtn = this.navigation.querySelector('[data-nav=\"last\"]');\n\n        // Disable first/prev buttons on first page\n        if (firstBtn) firstBtn.disabled = (currentPage <= 1);\n        if (prevBtn) prevBtn.disabled = (currentPage <= 1);\n\n        // Disable next/last buttons on last page\n        if (nextBtn) nextBtn.disabled = (currentPage >= this.totalPages);\n        if (lastBtn) lastBtn.disabled = (currentPage >= this.totalPages);\n\n        console.debug(`[UIManager] 🔧 Updated navigation button states for page ${currentPage}/${this.totalPages}`);\n    }\n\n    /**\n     * Update zoom button states\n     */\n    updateZoomState(zoomMode) {\n        const zoomButtons = this.navigation?.querySelectorAll('.zoom-button');\n        if (zoomButtons) {\n            zoomButtons.forEach(button => {\n                const buttonZoom = button.dataset.zoom;\n                if (buttonZoom === zoomMode) {\n                    button.classList.add('active');\n                } else {\n                    button.classList.remove('active');\n                }\n            });\n        }\n    }\n\n    /**\n     * Handle zoom\n     */\n    _handleZoom(action) {\n        console.debug(`[UIManager] 🔍 DEBUG: Zoom action requested: ${action}`);\n\n        // Update button states\n        this.updateZoomState(action);\n\n        switch (action) {\n            case 'in':\n                // Emit relative zoom increase\n                console.debug(`[UIManager] 🔍 DEBUG: Emitting zoom in request`);\n                this.emit('zoomRequested', { zoom: 'in' });\n                break;\n            case 'out':\n                // Emit relative zoom decrease\n                console.debug(`[UIManager] 🔍 DEBUG: Emitting zoom out request`);\n                this.emit('zoomRequested', { zoom: 'out' });\n                break;\n            case 'fit':\n                console.debug(`[UIManager] 🔍 DEBUG: Emitting fit to page request`);\n                this.emit('zoomRequested', { zoom: 'fit' });\n                break;\n            case 'fit-width':\n                console.debug(`[UIManager] 🔍 DEBUG: Emitting fit to width request`);\n                this.emit('zoomRequested', { zoom: 'fit-width' });\n                break;\n        }\n    }\n\n    /**\n     * Update document information\n     */\n    updateDocumentInfo(docInfo) {\n        this.totalPages = docInfo.numPages || 0;\n\n        // Update navigation\n        const totalPagesSpan = this.navigation?.querySelector('.total-pages');\n        if (totalPagesSpan) {\n            totalPagesSpan.textContent = this.totalPages;\n        }\n\n        const pageInput = this.navigation?.querySelector('.page-input');\n        if (pageInput) {\n            pageInput.max = this.totalPages;\n        }\n\n        // Set fit-width as default active zoom mode\n        this.updateZoomState('fit-width');\n\n        // Update status\n        this.updateStatus(`Document loaded: ${this.totalPages} pages`);\n    }\n\n    /**\n     * Update current page display\n     */\n    updateCurrentPage(pageNum, totalPages = null) {\n        this.currentPage = pageNum;\n        if (totalPages) {\n            this.totalPages = totalPages;\n        }\n\n        const pageInput = this.navigation?.querySelector('.page-input');\n        if (pageInput) {\n            pageInput.value = pageNum;\n        }\n\n        const totalPagesSpan = this.navigation?.querySelector('.total-pages');\n        if (totalPagesSpan && totalPages) {\n            totalPagesSpan.textContent = totalPages;\n        }\n    }\n\n    /**\n     * Update tool state\n     */\n    updateToolState(toolName, isActive) {\n        this.activeToolName = isActive ? toolName : null;\n\n        // Update toolbar buttons\n        const toolButtons = this.toolbar?.querySelectorAll('.tool-button');\n        if (toolButtons) {\n            toolButtons.forEach(button => {\n                const buttonTool = button.dataset.tool;\n                if (buttonTool === toolName) {\n                    button.classList.toggle('active', isActive);\n                } else {\n                    button.classList.remove('active');\n                }\n            });\n        }\n\n        // Update status bar\n        const activeToolLabel = this.statusBar?.querySelector('.active-tool-label');\n        if (activeToolLabel) {\n            activeToolLabel.textContent = isActive ? `${toolName} tool active` : 'No tool active';\n        }\n    }\n\n    /**\n     * Show error message\n     */\n    showError(message) {\n        if (this.errorDisplay) {\n            const errorMessage = this.errorDisplay.querySelector('.error-message');\n            if (errorMessage) {\n                errorMessage.textContent = message;\n            }\n            this.errorDisplay.style.display = 'block';\n        }\n\n        if (this.loadingIndicator) {\n            this.loadingIndicator.style.display = 'none';\n        }\n\n        this.updateStatus(`Error: ${message}`);\n    }\n\n    /**\n     * Hide error message\n     */\n    hideError() {\n        if (this.errorDisplay) {\n            this.errorDisplay.style.display = 'none';\n        }\n    }\n\n    /**\n     * Show/hide loading indicator\n     */\n    setLoading(isLoading) {\n        if (this.loadingIndicator) {\n            this.loadingIndicator.style.display = isLoading ? 'block' : 'none';\n        }\n\n        if (!isLoading) {\n            this.hideError();\n        }\n    }\n\n    /**\n     * Update status message\n     */\n    updateStatus(message) {\n        const statusText = this.statusBar?.querySelector('.status-text');\n        if (statusText) {\n            statusText.textContent = message;\n        }\n    }\n\n    /**\n     * Add event handler with automatic cleanup\n     */\n    _addEventHandler(element, event, handler, options = {}) {\n        if (!element || typeof handler !== 'function') {\n            return;\n        }\n\n        const handlerKey = `${element.id || 'element'}_${event}_${Date.now()}`;\n\n        element.addEventListener(event, handler, options);\n\n        this.eventHandlers.set(handlerKey, {\n            element,\n            event,\n            handler,\n            options\n        });\n    }\n\n    /**\n     * Remove all event handlers\n     */\n    _removeAllEventHandlers() {\n        for (const [key, handlerData] of this.eventHandlers) {\n            handlerData.element.removeEventListener(\n                handlerData.event,\n                handlerData.handler,\n                handlerData.options\n            );\n        }\n        this.eventHandlers.clear();\n    }\n\n    /**\n     * Bind methods to preserve context\n     */\n    _bindMethods() {\n        this.updateDocumentInfo = this.updateDocumentInfo.bind(this);\n        this.updateCurrentPage = this.updateCurrentPage.bind(this);\n        this.updateToolState = this.updateToolState.bind(this);\n        this.updateZoomState = this.updateZoomState.bind(this);\n        this.showError = this.showError.bind(this);\n        this.hideError = this.hideError.bind(this);\n        this.setLoading = this.setLoading.bind(this);\n        this.updateStatus = this.updateStatus.bind(this);\n    }\n\n    /**\n     * Destroy the UI manager\n     */\n    destroy() {\n        console.debug('[UIManager] Destroying UI manager');\n\n        // Remove all event handlers\n        this._removeAllEventHandlers();\n\n        // Remove all event listeners\n        this.removeAllListeners();\n\n        // Clear references\n        this.toolbar = null;\n        this.navigation = null;\n        this.statusBar = null;\n        this.loadingIndicator = null;\n        this.errorDisplay = null;\n        this.container = null;\n\n        this.isInitialized = false;\n    }\n}\n\nexport default UIManager;","/**\n * AnnotationStorage - Manages annotation data persistence\n *\n * Handles saving, loading, and caching of annotations\n */\n\nimport { EventEmitter } from '../utils/EventEmitter.js';\n\nexport class AnnotationStorage extends EventEmitter {\n    constructor(options = {}) {\n        super();\n\n        this.blockId = options.blockId;\n        this.userId = options.userId || 'anonymous';\n        this.courseId = options.courseId || '';\n        this.handlerUrl = options.handlerUrl;\n\n        // Storage configuration\n        this.config = {\n            autoSave: true,\n            saveInterval: 10000, // 10 seconds\n            cacheExpiry: 3600000, // 1 hour\n            ...options.config\n        };\n\n        // Cache\n        this.annotationCache = new Map();\n        this.dirtyPages = new Set();\n\n        // Save state\n        this.isSaving = false;\n        this.saveQueue = [];\n        this.autoSaveTimer = null;\n\n        // Bind methods\n        this._bindMethods();\n\n        // Start auto-save if enabled\n        if (this.config.autoSave) {\n            this._startAutoSave();\n        }\n    }\n\n    /**\n     * Save annotation\n     */\n    async saveAnnotation(annotation) {\n        try {\n            // Add to cache\n            this.annotationCache.set(annotation.id, annotation);\n\n            // Mark page as dirty\n            this.dirtyPages.add(annotation.pageNum);\n\n            // Add to save queue\n            this.saveQueue.push({\n                type: 'save',\n                annotation: annotation,\n                timestamp: Date.now()\n            });\n\n            this.emit('annotationCached', annotation);\n\n            // Save immediately if not auto-saving\n            if (!this.config.autoSave) {\n                await this._processSaveQueue();\n            }\n\n        } catch (error) {\n            console.error('[AnnotationStorage] Error saving annotation:', error);\n            this.emit('error', error);\n        }\n    }\n\n    /**\n     * Delete annotation\n     */\n    async deleteAnnotation(annotation) {\n        try {\n            // Remove from cache\n            this.annotationCache.delete(annotation.id);\n\n            // Mark page as dirty\n            this.dirtyPages.add(annotation.pageNum);\n\n            // Add to save queue\n            this.saveQueue.push({\n                type: 'delete',\n                annotation: annotation,\n                timestamp: Date.now()\n            });\n\n            this.emit('annotationDeleted', annotation);\n\n            // Save immediately if not auto-saving\n            if (!this.config.autoSave) {\n                await this._processSaveQueue();\n            }\n\n        } catch (error) {\n            console.error('[AnnotationStorage] Error deleting annotation:', error);\n            this.emit('error', error);\n        }\n    }\n\n    /**\n     * Load annotations from server\n     */\n    async loadAnnotations(existingData = {}) {\n        try {\n            console.debug('[AnnotationStorage] Loading annotations from server');\n\n            if (!this.handlerUrl) {\n                console.warn('[AnnotationStorage] No handler URL provided, using existing data only');\n                return existingData;\n            }\n\n            // Try to load from server\n            const response = await this._makeRequest('GET', this.handlerUrl + '?action=load');\n\n            if (response.success && response.data) {\n                // Merge with existing data\n                const mergedData = { ...existingData, ...response.data };\n\n                // Cache loaded annotations\n                this._cacheAnnotations(mergedData);\n\n                console.debug('[AnnotationStorage] Annotations loaded successfully');\n\n                this.emit('annotationsLoaded', mergedData);\n\n                return mergedData;\n            } else {\n                console.warn('[AnnotationStorage] Failed to load from server, using existing data');\n                return existingData;\n            }\n\n        } catch (error) {\n            console.error('[AnnotationStorage] Error loading annotations:', error);\n            this.emit('error', error);\n            return existingData;\n        }\n    }\n\n    /**\n     * Process save queue\n     */\n    async _processSaveQueue() {\n        if (this.isSaving || this.saveQueue.length === 0) {\n            return;\n        }\n\n        this.isSaving = true;\n\n        try {\n            // Prepare data to save\n            const saveData = this._prepareSaveData();\n\n            if (!saveData || Object.keys(saveData).length === 0) {\n                this.isSaving = false;\n                return;\n            }\n\n            console.debug('[AnnotationStorage] Saving annotations to server');\n\n            // Save to server\n            if (this.handlerUrl) {\n                const response = await this._makeRequest('POST', this.handlerUrl, {\n                    action: 'save',\n                    data: saveData,\n                    userId: this.userId,\n                    courseId: this.courseId,\n                    blockId: this.blockId\n                });\n\n                if (response.success) {\n                    // Clear save queue and dirty pages\n                    this.saveQueue = [];\n                    this.dirtyPages.clear();\n\n                    console.debug('[AnnotationStorage] Annotations saved successfully');\n\n                    this.emit('annotationsSaved', saveData);\n                } else {\n                    console.error('[AnnotationStorage] Server save failed:', response.error);\n                    this.emit('error', new Error(response.error || 'Save failed'));\n                }\n            }\n\n        } catch (error) {\n            console.error('[AnnotationStorage] Error processing save queue:', error);\n            this.emit('error', error);\n        } finally {\n            this.isSaving = false;\n        }\n    }\n\n    /**\n     * Prepare data for saving\n     */\n    _prepareSaveData() {\n        const saveData = {};\n\n        // Group annotations by type and page\n        for (const annotation of this.annotationCache.values()) {\n            const type = annotation.type;\n            const pageNum = annotation.pageNum;\n\n            if (!saveData[type]) {\n                saveData[type] = {};\n            }\n\n            if (!saveData[type][pageNum]) {\n                saveData[type][pageNum] = [];\n            }\n\n            saveData[type][pageNum].push({\n                id: annotation.id,\n                timestamp: annotation.timestamp,\n                userId: annotation.userId,\n                data: annotation.data,\n                config: annotation.config\n            });\n        }\n\n        return saveData;\n    }\n\n    /**\n     * Cache annotations from loaded data\n     */\n    _cacheAnnotations(annotationsData) {\n        for (const [type, typeData] of Object.entries(annotationsData)) {\n            for (const [pageNum, pageAnnotations] of Object.entries(typeData)) {\n                const page = parseInt(pageNum, 10);\n\n                if (Array.isArray(pageAnnotations)) {\n                    for (const annotationData of pageAnnotations) {\n                        const annotation = {\n                            id: annotationData.id,\n                            type: type,\n                            pageNum: page,\n                            timestamp: annotationData.timestamp || Date.now(),\n                            userId: annotationData.userId || this.userId,\n                            data: annotationData.data || annotationData,\n                            config: annotationData.config || {}\n                        };\n\n                        this.annotationCache.set(annotation.id, annotation);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Make HTTP request\n     */\n    async _makeRequest(method, url, data = null) {\n        const options = {\n            method: method,\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Requested-With': 'XMLHttpRequest'\n            }\n        };\n\n        if (data) {\n            options.body = JSON.stringify(data);\n        }\n\n        // Add CSRF token if available\n        const csrfToken = document.querySelector('meta[name=\"csrf-token\"]');\n        if (csrfToken) {\n            options.headers['X-CSRFToken'] = csrfToken.getAttribute('content');\n        }\n\n        const response = await fetch(url, options);\n\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n\n        return await response.json();\n    }\n\n    /**\n     * Start auto-save timer\n     */\n    _startAutoSave() {\n        if (this.autoSaveTimer) {\n            clearInterval(this.autoSaveTimer);\n        }\n\n        this.autoSaveTimer = setInterval(() => {\n            this._processSaveQueue();\n        }, this.config.saveInterval);\n\n        console.debug(`[AnnotationStorage] Auto-save started with ${this.config.saveInterval}ms interval`);\n    }\n\n    /**\n     * Stop auto-save timer\n     */\n    _stopAutoSave() {\n        if (this.autoSaveTimer) {\n            clearInterval(this.autoSaveTimer);\n            this.autoSaveTimer = null;\n        }\n    }\n\n    /**\n     * Force save all pending changes\n     */\n    async forceSave() {\n        await this._processSaveQueue();\n    }\n\n    /**\n     * Get annotations for a specific page\n     */\n    getAnnotationsForPage(pageNum, type = null) {\n        const annotations = [];\n\n        for (const annotation of this.annotationCache.values()) {\n            if (annotation.pageNum === pageNum) {\n                if (!type || annotation.type === type) {\n                    annotations.push(annotation);\n                }\n            }\n        }\n\n        return annotations;\n    }\n\n    /**\n     * Get all annotations\n     */\n    getAllAnnotations() {\n        return Array.from(this.annotationCache.values());\n    }\n\n    /**\n     * Get annotations by type\n     */\n    getAnnotationsByType(type) {\n        const annotations = [];\n\n        for (const annotation of this.annotationCache.values()) {\n            if (annotation.type === type) {\n                annotations.push(annotation);\n            }\n        }\n\n        return annotations;\n    }\n\n    /**\n     * Clear all annotations\n     */\n    clearAllAnnotations() {\n        this.annotationCache.clear();\n        this.dirtyPages.clear();\n        this.saveQueue = [];\n\n        this.emit('allAnnotationsCleared');\n    }\n\n    /**\n     * Get cache statistics\n     */\n    getCacheStatistics() {\n        const stats = {\n            totalAnnotations: this.annotationCache.size,\n            dirtyPages: Array.from(this.dirtyPages),\n            pendingSaves: this.saveQueue.length,\n            autoSaveEnabled: this.config.autoSave,\n            isSaving: this.isSaving\n        };\n\n        // Count by type\n        stats.byType = {};\n        for (const annotation of this.annotationCache.values()) {\n            if (!stats.byType[annotation.type]) {\n                stats.byType[annotation.type] = 0;\n            }\n            stats.byType[annotation.type]++;\n        }\n\n        return stats;\n    }\n\n    /**\n     * Bind methods to preserve context\n     */\n    _bindMethods() {\n        this.saveAnnotation = this.saveAnnotation.bind(this);\n        this.deleteAnnotation = this.deleteAnnotation.bind(this);\n        this.loadAnnotations = this.loadAnnotations.bind(this);\n        this._processSaveQueue = this._processSaveQueue.bind(this);\n    }\n\n    /**\n     * Destroy the storage manager\n     */\n    destroy() {\n        console.debug('[AnnotationStorage] Destroying annotation storage');\n\n        // Stop auto-save\n        this._stopAutoSave();\n\n        // Force save pending changes\n        this._processSaveQueue().catch(error => {\n            console.error('[AnnotationStorage] Error in final save:', error);\n        });\n\n        // Clear cache\n        this.annotationCache.clear();\n        this.dirtyPages.clear();\n        this.saveQueue = [];\n\n        // Remove all event listeners\n        this.removeAllListeners();\n    }\n}\n\nexport default AnnotationStorage;","/**\n * PDF XBlock - Modern ES6 Modules Implementation\n *\n * Main entry point that orchestrates all PDF functionality including:\n * - PDF document loading and rendering\n * - Annotation tools (highlight, scribble, text, shape, note)\n * - Storage and persistence\n * - UI management\n */\n\nimport { PDFManager } from './core/PDFManager.js';\nimport { ToolManager } from './tools/ToolManager.js';\nimport { UIManager } from './ui/UIManager.js';\nimport { AnnotationStorage } from './storage/AnnotationStorage.js';\nimport { EventEmitter } from './utils/EventEmitter.js';\n\nexport class PdfxXBlock extends EventEmitter {\n    constructor(runtime, element, initArgs) {\n        super();\n\n        // Store core references\n        this.runtime = runtime;\n        // Convert jQuery object to native DOM element if needed\n        this.element = element.jquery ? element[0] : element;\n        this.initArgs = initArgs || {};\n\n        // Extract configuration from initArgs\n        this.config = {\n            blockId: this.initArgs.blockId || this._generateBlockId(),\n            pdfUrl: this.initArgs.pdfUrl,\n            allowDownload: this.initArgs.allowDownload !== false,\n            allowAnnotation: this.initArgs.allowAnnotation !== false,\n            currentPage: this.initArgs.currentPage || 1,\n            savedAnnotations: this.initArgs.savedAnnotations || {},\n            drawingStrokes: this.initArgs.drawingStrokes || {},\n            highlights: this.initArgs.highlights || {},\n            userId: this.initArgs.userId || 'anonymous',\n            courseId: this.initArgs.courseId || '',\n            isStudio: this._isStudioEnvironment()\n        };\n\n        // Initialize managers\n        this.pdfManager = null;\n        this.toolManager = null;\n        this.uiManager = null;\n        this.storageManager = null;\n\n        // State\n        this.isInitialized = false;\n        this.isLoading = false;\n\n        // Bind methods to preserve context\n        this._bindMethods();\n    }\n\n    /**\n     * Wait for PDF.js to be ready\n     */\n    async _waitForPDFJS() {\n        return new Promise((resolve, reject) => {\n            // Check if PDF.js is already available\n            if (typeof window.pdfjsLib !== 'undefined') {\n                console.debug('[PdfxXBlock] PDF.js already available');\n                resolve();\n                return;\n            }\n\n            console.debug('[PdfxXBlock] Waiting for PDF.js to load...');\n\n            let attempts = 0;\n            const maxAttempts = 100; // 10 seconds max wait (100ms * 100)\n\n            // Set up interval to check for PDF.js\n            const checkInterval = setInterval(() => {\n                attempts++;\n\n                if (typeof window.pdfjsLib !== 'undefined') {\n                    console.debug('[PdfxXBlock] PDF.js loaded successfully');\n                    clearInterval(checkInterval);\n                    resolve();\n                } else if (attempts >= maxAttempts) {\n                    console.error('[PdfxXBlock] Timeout waiting for PDF.js to load');\n                    clearInterval(checkInterval);\n                    reject(new Error('PDF.js failed to load within timeout'));\n                }\n            }, 100);\n\n            // Also listen for the pdfjsReady event\n            const onPDFJSReady = () => {\n                if (typeof window.pdfjsLib !== 'undefined') {\n                    console.debug('[PdfxXBlock] PDF.js ready via event');\n                    clearInterval(checkInterval);\n                    document.removeEventListener('pdfjsReady', onPDFJSReady);\n                    resolve();\n                }\n            };\n\n            document.addEventListener('pdfjsReady', onPDFJSReady, { once: true });\n        });\n    }\n\n    /**\n     * Initialize the PDF XBlock\n     */\n    async init() {\n        if (this.isInitialized) {\n            console.warn('[PdfxXBlock] Already initialized');\n            return this;\n        }\n\n        if (this.isLoading) {\n            console.warn('[PdfxXBlock] Already loading');\n            return this;\n        }\n\n        this.isLoading = true;\n\n        try {\n            console.debug(`[PdfxXBlock] Initializing for block ${this.config.blockId}`);\n\n            // Wait for PDF.js to be ready first\n            await this._waitForPDFJS();\n\n            // Initialize storage first\n            this.storageManager = new AnnotationStorage({\n                blockId: this.config.blockId,\n                userId: this.config.userId,\n                courseId: this.config.courseId,\n                handlerUrl: this.runtime.handlerUrl(this.element, 'save_annotations')\n            });\n\n            // Initialize PDF manager (now PDF.js is guaranteed to be ready)\n            this.pdfManager = new PDFManager({\n                blockId: this.config.blockId,\n                container: this.element,\n                pdfUrl: this.config.pdfUrl,\n                currentPage: this.config.currentPage\n            });\n\n            // Initialize UI manager\n            this.uiManager = new UIManager({\n                blockId: this.config.blockId,\n                container: this.element,\n                allowDownload: this.config.allowDownload,\n                isStudio: this.config.isStudio\n            });\n\n            // Initialize tool manager\n            this.toolManager = new ToolManager({\n                blockId: this.config.blockId,\n                container: this.element,\n                pdfManager: this.pdfManager,\n                storageManager: this.storageManager,\n                allowAnnotation: this.config.allowAnnotation\n            });\n\n            // Set up event listeners between managers\n            this._setupEventListeners();\n\n            // Load the PDF document\n            await this.pdfManager.loadDocument(this.config.pdfUrl);\n\n            // Initialize UI components\n            await this.uiManager.init();\n\n            // Initialize tools if annotation is allowed\n            if (this.config.allowAnnotation) {\n                await this.toolManager.init();\n\n                // Load existing annotations\n                await this._loadExistingAnnotations();\n            }\n\n            // Navigate to the current page\n            await this.pdfManager.navigateToPage(this.config.currentPage);\n\n            this.isInitialized = true;\n            this.isLoading = false;\n\n            // Emit initialization complete event\n            this.emit('initialized', {\n                blockId: this.config.blockId,\n                pdfManager: this.pdfManager,\n                toolManager: this.toolManager,\n                uiManager: this.uiManager\n            });\n\n            console.debug(`[PdfxXBlock] Initialization complete for block ${this.config.blockId}`);\n\n            return this;\n\n        } catch (error) {\n            console.error('[PdfxXBlock] Initialization error:', error);\n            this.isLoading = false;\n            this.emit('error', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Load existing annotations from storage\n     */\n    async _loadExistingAnnotations() {\n        try {\n            // Load highlights\n            if (this.config.highlights && Object.keys(this.config.highlights).length > 0) {\n                const highlightTool = this.toolManager.getTool('highlight');\n                if (highlightTool) {\n                    await highlightTool.loadAnnotations(this.config.highlights);\n                }\n            }\n\n            // Load drawing strokes\n            if (this.config.drawingStrokes && Object.keys(this.config.drawingStrokes).length > 0) {\n                const scribbleTool = this.toolManager.getTool('scribble');\n                if (scribbleTool) {\n                    await scribbleTool.loadAnnotations(this.config.drawingStrokes);\n                }\n            }\n\n            // Load other saved annotations\n            if (this.config.savedAnnotations && Object.keys(this.config.savedAnnotations).length > 0) {\n                await this.storageManager.loadAnnotations(this.config.savedAnnotations);\n            }\n\n        } catch (error) {\n            console.error('[PdfxXBlock] Error loading existing annotations:', error);\n        }\n    }\n\n    /**\n     * Set up event listeners between managers\n     */\n    _setupEventListeners() {\n        // PDF Manager events\n        this.pdfManager.on('documentLoaded', (data) => {\n            this.emit('documentLoaded', data);\n            this.uiManager.updateDocumentInfo(data);\n            this.uiManager.setLoading(false);\n            console.debug('[PdfxXBlock] ✅ BULLETPROOF FIX: Loading indicator hidden via setLoading(false)');\n        });\n\n        this.pdfManager.on('pageChanged', (data) => {\n            this.emit('pageChanged', data);\n            this.uiManager.updateCurrentPage(data.pageNum, data.totalPages);\n            if (this.toolManager) {\n                this.toolManager.handlePageChange(data.pageNum);\n            }\n        });\n\n        this.pdfManager.on('error', (error) => {\n            this.emit('error', error);\n            this.uiManager.showError(error.message);\n        });\n\n        // Tool Manager events\n        if (this.toolManager) {\n            this.toolManager.on('toolActivated', (data) => {\n                this.emit('toolActivated', data);\n                this.uiManager.updateToolState(data.toolName, true);\n            });\n\n            this.toolManager.on('toolDeactivated', (data) => {\n                this.emit('toolDeactivated', data);\n                this.uiManager.updateToolState(data.toolName, false);\n            });\n\n            this.toolManager.on('annotationCreated', (data) => {\n                this.emit('annotationCreated', data);\n                this.storageManager.saveAnnotation(data);\n            });\n\n            this.toolManager.on('annotationDeleted', (data) => {\n                this.emit('annotationDeleted', data);\n                this.storageManager.deleteAnnotation(data);\n            });\n        }\n\n        // UI Manager events\n        this.uiManager.on('toolRequested', (data) => {\n            if (this.toolManager) {\n                this.toolManager.activateTool(data.toolName);\n            }\n        });\n\n        this.uiManager.on('pageNavigationRequested', (data) => {\n            console.debug(`[PdfxXBlock] 🔍 DEBUG: Received pageNavigationRequested event with data:`, data);\n            console.debug(`[PdfxXBlock] 🚀 NAVIGATION TEST: Attempting to navigate to page ${data.pageNum}`);\n            this.pdfManager.navigateToPage(data.pageNum);\n        });\n\n        this.uiManager.on('zoomRequested', (data) => {\n            this.pdfManager.setZoom(data.zoom);\n        });\n\n        this.uiManager.on('downloadRequested', () => {\n            if (this.config.allowDownload) {\n                this._downloadPDF();\n            }\n        });\n    }\n\n    /**\n     * Download the PDF\n     */\n    _downloadPDF() {\n        if (!this.config.pdfUrl) {\n            console.warn('[PdfxXBlock] No PDF URL available for download');\n            return;\n        }\n\n        const link = document.createElement('a');\n        link.href = this.config.pdfUrl;\n        link.download = this._getFileName();\n        link.style.display = 'none';\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    /**\n     * Get filename from PDF URL\n     */\n    _getFileName() {\n        if (!this.config.pdfUrl) return 'document.pdf';\n        const parts = this.config.pdfUrl.split('/');\n        const filename = parts[parts.length - 1];\n        return filename.includes('.pdf') ? filename : 'document.pdf';\n    }\n\n    /**\n     * Generate a unique block ID if not provided\n     */\n    _generateBlockId() {\n        return 'pdfx-' + Date.now() + '-' + Math.random().toString(36).substr(2, 9);\n    }\n\n    /**\n     * Check if we're in Studio environment\n     */\n    _isStudioEnvironment() {\n        return (window.location.href.indexOf('studio') !== -1) ||\n               (window.location.href.indexOf('/cms/') !== -1);\n    }\n\n    /**\n     * Bind methods to preserve context\n     */\n    _bindMethods() {\n        this.init = this.init.bind(this);\n        this._loadExistingAnnotations = this._loadExistingAnnotations.bind(this);\n        this._setupEventListeners = this._setupEventListeners.bind(this);\n        this._downloadPDF = this._downloadPDF.bind(this);\n    }\n\n    /**\n     * Get the current state of the XBlock\n     */\n    getState() {\n        return {\n            blockId: this.config.blockId,\n            isInitialized: this.isInitialized,\n            isLoading: this.isLoading,\n            currentPage: this.pdfManager ? this.pdfManager.getCurrentPage() : this.config.currentPage,\n            totalPages: this.pdfManager ? this.pdfManager.getTotalPages() : 0,\n            activeTool: this.toolManager ? this.toolManager.getActiveTool() : null,\n            documentLoaded: this.pdfManager ? this.pdfManager.isDocumentLoaded() : false\n        };\n    }\n\n    /**\n     * Clean up resources\n     */\n    destroy() {\n        console.debug(`[PdfxXBlock] Destroying instance for block ${this.config.blockId}`);\n\n        // Clean up managers\n        if (this.toolManager) {\n            this.toolManager.destroy();\n        }\n\n        if (this.uiManager) {\n            this.uiManager.destroy();\n        }\n\n        if (this.pdfManager) {\n            this.pdfManager.destroy();\n        }\n\n        if (this.storageManager) {\n            this.storageManager.destroy();\n        }\n\n        // Remove all event listeners\n        this.removeAllListeners();\n\n        // Clear references\n        this.pdfManager = null;\n        this.toolManager = null;\n        this.uiManager = null;\n        this.storageManager = null;\n\n        this.isInitialized = false;\n\n        this.emit('destroyed', { blockId: this.config.blockId });\n    }\n}\n\n// Global function for Open edX XBlock framework compatibility\nwindow.PdfxXBlock = function(runtime, element, initArgs) {\n    const instance = new PdfxXBlock(runtime, element, initArgs);\n\n    // Initialize the instance\n    instance.init().catch(error => {\n        console.error('[PdfxXBlock] Failed to initialize:', error);\n    });\n\n    return instance;\n};\n\n// Store instances globally for debugging and legacy compatibility\nwindow.PdfxInstances = window.PdfxInstances || {};\n\n// Global debug function for testing navigation\nwindow.testPdfNavigation = function(blockId, action) {\n    console.debug(`[DEBUG] Testing navigation: ${action} for block ${blockId}`);\n\n    // Find the navigation element\n    const navigation = document.querySelector(`#navigation-${blockId}`);\n    if (!navigation) {\n        console.error(`[DEBUG] Navigation element not found for block ${blockId}`);\n        return;\n    }\n\n    // Find the button for the action\n    const button = navigation.querySelector(`[data-nav=\"${action}\"]`);\n    if (!button) {\n        console.error(`[DEBUG] Navigation button not found for action: ${action}`);\n        return;\n    }\n\n    console.debug(`[DEBUG] Found button:`, button);\n    console.debug(`[DEBUG] Simulating click...`);\n\n    // Simulate click\n    button.click();\n};\n\n// Global debug function for testing zoom\nwindow.testPdfZoom = function(blockId, action) {\n    console.debug(`[DEBUG] Testing zoom: ${action} for block ${blockId}`);\n\n    // Find the navigation element\n    const navigation = document.querySelector(`#navigation-${blockId}`);\n    if (!navigation) {\n        console.error(`[DEBUG] Navigation element not found for block ${blockId}`);\n        return;\n    }\n\n    // Find the button for the action\n    const button = navigation.querySelector(`[data-zoom=\"${action}\"]`);\n    if (!button) {\n        console.error(`[DEBUG] Zoom button not found for action: ${action}`);\n        return;\n    }\n\n    console.debug(`[DEBUG] Found zoom button:`, button);\n    console.debug(`[DEBUG] Simulating click...`);\n\n    // Simulate click\n    button.click();\n};\n\nexport default PdfxXBlock;"],"names":["EventEmitter","constructor","this","events","Map","on","event","listener","options","Error","has","set","listenerData","once","get","push","off","listeners","index","findIndex","l","splice","length","delete","emit","args","slice","hadListeners","apply","error","console","eventNames","Array","from","keys","listenerCount","map","removeAllListeners","clear","setMaxListeners","n","maxListeners","getMaxListeners","PDFManager","super","blockId","container","pdfUrl","currentPage","pdfDocument","loadingTask","scale","rotation","renderContext","canvas","context","textLayer","isLoading","isDocumentLoaded","_initializePDFJS","pdfjsLib","GlobalWorkerOptions","workerSrc","debug","verbosity","VerbosityLevel","WARNINGS","loadDocument","url","warn","_cleanupDocument","loadingParams","_getSafePdfUrl","cMapUrl","cMapPacked","enableXfa","disableAutoFetch","disableStream","disableRange","getDocument","onProgress","progress","loaded","total","percent","Math","round","promise","numPages","_setupCanvas","document","title","_getDocumentTitle","metadata","_getDocumentMetadata","renderPage","forEach","selector","querySelectorAll","element","style","display","visibility","opacity","className","id","backgroundColor","classList","remove","background","mainContainer","querySelector","loadingIndicator","indexOf","charAt","window","location","protocol","host","createElement","canvasContainer","appendChild","getContext","textLayerContainer","pageNum","page","getPage","viewerArea","viewerWidth","offsetWidth","clientWidth","viewerHeight","offsetHeight","clientHeight","width","max","_calculateOptimalScale","viewport","getViewport","height","clearRect","canvasContext","enableWebGL","renderInteractiveForms","renderTask","render","_renderTextLayer","setTimeout","totalPages","innerHTML","position","top","left","pointerEvents","textContent","getTextContent","renderTextLayer","textLayerRender","textDivs","_renderTextLayerManual","textItems","items","item","tx","Util","transform","styles","fontName","div","str","fontSize","ascent","fontFamily","color","mode","containerWidth","containerHeight","pageWidth","pageHeight","widthScale","min","add","heightScale","scaledHeight","navigateToPage","nextPage","getTotalPages","previousPage","setZoom","getCurrentPage","getMetadata","info","Title","destroy","BaseTool","name","pdfManager","storageManager","isEnabled","isActive","config","size","annotations","annotationsByPage","eventHandlers","_bindMethods","init","enable","disable","activate","deactivate","cleanup","handlePageChange","_renderAnnotationsForPage","tool","createAnnotation","data","annotation","_generateAnnotationId","type","timestamp","Date","now","userId","_addAnnotationToPage","updateAnnotation","annotationId","deleteAnnotation","_removeAnnotationFromPage","getAnnotationsForPage","getAllAnnotations","values","loadAnnotations","annotationsData","pageAnnotations","Object","entries","parseInt","isArray","annotationData","exportAnnotations","setConfig","getConfig","isToolEnabled","isToolActive","addEventHandler","handler","handlerKey","removeEventHandler","addEventListener","handlerData","removeEventListener","removeAllEventHandlers","key","existingIndex","a","random","toString","substr","bind","ScribbleTool","fabricCanvas","isDrawing","currentBrush","brushType","strokesByPage","canvasWidth","canvasHeight","fabric","_setupCanvasContainer","_initializeFabricCanvas","drawContainer","zIndex","pdfContainer","canvasElement","Canvas","isDrawingMode","selection","preserveObjectStacking","renderOnAddRemove","skipTargetFind","interactive","_setupDrawingBrush","_setupFabricEventListeners","_resizeCanvas","freeDrawingBrush","PencilBrush","_handlePathCreated","_handleCanvasCleared","path","pathData","strokeWidth","stroke","fill","scaleX","scaleY","angle","fabricPath","_addStrokeToPage","defaultCursor","freeDrawingCursor","_renderStrokesForPage","setDimensions","_renderStrokeFromAnnotation","Path","selectable","evented","clearCurrentPage","undoLastStroke","lastAnnotation","dispose","parentNode","removeChild","HighlightTool","isSelecting","selectionTimeout","borderRadius","highlightElements","highlightContainer","_setupHighlightContainer","_enableTextHighlighting","_disableTextHighlighting","_clearSelection","userSelect","webkitUserSelect","MozUserSelect","msUserSelect","_handleTextSelection","_handleMouseDown","_styleTextSpans","_removeTextSpanStyles","spans","styleId","getElementById","head","span","cursor","transition","clearTimeout","_processTextSelection","getSelection","rangeCount","range","getRangeAt","collapsed","trim","selectionData","_getSelectionData","_renderHighlight","rects","getClientRects","textLayerRect","getBoundingClientRect","highlights","i","rect","text","startOffset","endOffset","containerInfo","_getContainerInfo","startContainer","endContainer","nodeType","Node","TEXT_NODE","_a","parentElement","_b","highlight","dataset","highlightIndex","removeAllRanges","_clearAllHighlightElements","_renderHighlightsForPage","elements","_updateExistingHighlights","TextTool","ShapeTool","NoteTool","ToolManager","allowAnnotation","tools","activeTool","isInitialized","enabledTools","defaultTool","_registerTools","_setupEventListeners","toolManager","toolConfigs","class","enabled","includes","toolConfig","_registerTool","ToolClass","_setupToolEventListeners","_setupKeyboardShortcuts","shortcuts","KeyH","KeyM","KeyT","KeyS","KeyN","Escape","handleKeydown","target","tagName","ctrlKey","metaKey","action","code","deactivateCurrentTool","preventDefault","activateTool","_keyboardHandler","toolName","getTool","getAllTools","getActiveTool","getActiveToolName","hasToolAvailable","setToolConfig","getToolConfig","enableTool","disableTool","allAnnotations","toolAnnotations","loadAllAnnotations","promises","toolData","Promise","all","clearAllAnnotations","getToolStatistics","stats","totalAnnotations","fromEntries","destroyPromises","UIManager","allowDownload","isStudio","toolbar","navigation","statusBar","errorDisplay","activeToolName","_initializeLoadingIndicator","_initializeErrorDisplay","_initializeToolbar","_initializeNavigation","_initializeStatusBar","uiManager","retryButton","_addEventHandler","_setupToolbarEvents","_createToolbarHTML","insertBefore","firstChild","icon","toolsHTML","button","_activateTool","_handleAction","colorPicker","value","sizeSlider","possibleSelectors","foundNavigation","outerHTML","_setupNavigationEvents","pdfViewerArea","nextSibling","navButtons","nav","stopPropagation","_handleNavigation","pageInput","zoomButtons","zoom","_handleZoom","setAttribute","_handleKeyboardShortcuts","targetPage","_updateNavigationButtonStates","firstBtn","prevBtn","nextBtn","lastBtn","disabled","updateZoomState","zoomMode","updateDocumentInfo","docInfo","totalPagesSpan","updateStatus","updateCurrentPage","updateToolState","toolButtons","toggle","activeToolLabel","showError","message","errorMessage","hideError","setLoading","statusText","_removeAllEventHandlers","AnnotationStorage","courseId","handlerUrl","autoSave","saveInterval","cacheExpiry","annotationCache","dirtyPages","Set","isSaving","saveQueue","autoSaveTimer","_startAutoSave","saveAnnotation","_processSaveQueue","existingData","response","_makeRequest","success","mergedData","_cacheAnnotations","saveData","_prepareSaveData","typeData","method","headers","body","JSON","stringify","csrfToken","getAttribute","fetch","ok","status","json","clearInterval","setInterval","_stopAutoSave","forceSave","getAnnotationsByType","getCacheStatistics","pendingSaves","autoSaveEnabled","byType","catch","PdfxXBlock","runtime","initArgs","jquery","_generateBlockId","savedAnnotations","drawingStrokes","_isStudioEnvironment","_waitForPDFJS","resolve","reject","attempts","checkInterval","onPDFJSReady","_loadExistingAnnotations","highlightTool","scribbleTool","_downloadPDF","link","href","download","_getFileName","click","parts","split","filename","getState","documentLoaded","instance","PdfxInstances","testPdfNavigation","testPdfZoom"],"mappings":"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"}