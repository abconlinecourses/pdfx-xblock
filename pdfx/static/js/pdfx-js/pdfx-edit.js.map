{"version":3,"file":"pdfx-edit.js","sources":["../modern/src/utils/EventEmitter.js","../modern/src/studio/StudioEditor.js"],"sourcesContent":["/**\n * EventEmitter - Simple event emitter implementation\n *\n * Provides event-based communication between different components\n */\n\nexport class EventEmitter {\n    constructor() {\n        this.events = new Map();\n    }\n\n    /**\n     * Register an event listener\n     * @param {string} event - Event name\n     * @param {Function} listener - Event listener function\n     * @param {Object} options - Options (once: boolean)\n     */\n    on(event, listener, options = {}) {\n        if (typeof listener !== 'function') {\n            throw new Error('Listener must be a function');\n        }\n\n        if (!this.events.has(event)) {\n            this.events.set(event, []);\n        }\n\n        const listenerData = {\n            listener,\n            once: options.once || false\n        };\n\n        this.events.get(event).push(listenerData);\n\n        return this;\n    }\n\n    /**\n     * Register a one-time event listener\n     * @param {string} event - Event name\n     * @param {Function} listener - Event listener function\n     */\n    once(event, listener) {\n        return this.on(event, listener, { once: true });\n    }\n\n    /**\n     * Remove an event listener\n     * @param {string} event - Event name\n     * @param {Function} listener - Event listener function to remove\n     */\n    off(event, listener) {\n        if (!this.events.has(event)) {\n            return this;\n        }\n\n        const listeners = this.events.get(event);\n        const index = listeners.findIndex(l => l.listener === listener);\n\n        if (index !== -1) {\n            listeners.splice(index, 1);\n\n            // Clean up empty event arrays\n            if (listeners.length === 0) {\n                this.events.delete(event);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Emit an event\n     * @param {string} event - Event name\n     * @param {...any} args - Arguments to pass to listeners\n     */\n    emit(event, ...args) {\n        if (!this.events.has(event)) {\n            return false;\n        }\n\n        const listeners = this.events.get(event).slice(); // Copy to avoid issues if modified during emit\n        let hadListeners = false;\n\n        for (const listenerData of listeners) {\n            hadListeners = true;\n\n            try {\n                listenerData.listener.apply(this, args);\n            } catch (error) {\n                console.error(`Error in event listener for '${event}':`, error);\n            }\n\n            // Remove one-time listeners\n            if (listenerData.once) {\n                this.off(event, listenerData.listener);\n            }\n        }\n\n        return hadListeners;\n    }\n\n    /**\n     * Get all event names that have listeners\n     */\n    eventNames() {\n        return Array.from(this.events.keys());\n    }\n\n    /**\n     * Get the number of listeners for an event\n     * @param {string} event - Event name\n     */\n    listenerCount(event) {\n        return this.events.has(event) ? this.events.get(event).length : 0;\n    }\n\n    /**\n     * Get all listeners for an event\n     * @param {string} event - Event name\n     */\n    listeners(event) {\n        if (!this.events.has(event)) {\n            return [];\n        }\n\n        return this.events.get(event).map(l => l.listener);\n    }\n\n    /**\n     * Remove all listeners for an event, or all listeners for all events\n     * @param {string} [event] - Event name (optional)\n     */\n    removeAllListeners(event) {\n        if (event) {\n            this.events.delete(event);\n        } else {\n            this.events.clear();\n        }\n\n        return this;\n    }\n\n    /**\n     * Set the maximum number of listeners for an event (for debugging)\n     * @param {number} n - Maximum number of listeners\n     */\n    setMaxListeners(n) {\n        this.maxListeners = n;\n        return this;\n    }\n\n    /**\n     * Get the maximum number of listeners\n     */\n    getMaxListeners() {\n        return this.maxListeners || 10;\n    }\n}\n\nexport default EventEmitter;","/**\n * Studio Editor for PDF XBlock\n *\n * Handles the studio editing interface including:\n * - PDF file uploads\n * - URL configuration\n * - Form validation and submission\n * - Tab switching between upload and URL modes\n */\n\nimport { EventEmitter } from '../utils/EventEmitter.js';\n\nexport class StudioEditor extends EventEmitter {\n    constructor(runtime, element) {\n        super();\n\n        this.runtime = runtime;\n        // Convert jQuery object to native DOM element if needed\n        this.element = this._ensureDOMElement(element);\n        // Set container to element for consistency with other classes\n        this.container = this.element;\n        this.form = null;\n        this.currentTab = 'upload';\n        this.uploadedFile = null;\n\n        // Bind methods\n        this._bindMethods();\n\n        // Initialize when DOM is ready\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.init());\n        } else {\n            this.init();\n        }\n    }\n\n    /**\n     * Ensures the element is a native DOM element, converting from jQuery if necessary\n     * @param {Element|jQuery} element - The element to convert\n     * @returns {Element} Native DOM element\n     */\n    _ensureDOMElement(element) {\n        console.log('[StudioEditor] Element type:', typeof element);\n        console.log('[StudioEditor] Element constructor:', element?.constructor?.name);\n        console.log('[StudioEditor] Element nodeType:', element?.nodeType);\n        console.log('[StudioEditor] Element jquery property:', element?.jquery);\n        console.log('[StudioEditor] Element length:', element?.length);\n\n        // If it's already a native DOM element\n        if (element && element.nodeType === Node.ELEMENT_NODE) {\n            console.log('[StudioEditor] Element is already a native DOM element');\n            return element;\n        }\n\n        // If it's a jQuery object (check multiple ways)\n        if (element && (\n            element.jquery ||                    // jQuery object has .jquery property\n            (typeof element.get === 'function' && element.length !== undefined) || // jQuery-like object\n            (element.constructor && element.constructor.fn && element.constructor.fn.jquery) // jQuery constructor check\n        )) {\n            console.log('[StudioEditor] Converting jQuery object to DOM element');\n            console.log('[StudioEditor] jQuery object details:', {\n                length: element.length,\n                hasGet: typeof element.get === 'function',\n                hasJquery: !!element.jquery,\n                element0: element[0],\n                element0Type: element[0]?.nodeType\n            });\n\n            // Try element[0] first (most common way)\n            let domElement = element[0];\n\n            // If that doesn't work, try element.get(0)\n            if (!domElement || domElement.nodeType !== Node.ELEMENT_NODE) {\n                domElement = element.get(0);\n                console.log('[StudioEditor] Got DOM element via element.get(0)');\n            } else {\n                console.log('[StudioEditor] Got DOM element via element[0]');\n            }\n\n            if (domElement && domElement.nodeType === Node.ELEMENT_NODE) {\n                console.log('[StudioEditor] Successfully converted jQuery to DOM element:', domElement);\n                return domElement;\n            }\n        }\n\n        // If it's a string selector, try to find the element\n        if (typeof element === 'string') {\n            console.log('[StudioEditor] Element is a string selector, finding element:', element);\n            const foundElement = document.querySelector(element);\n            if (foundElement) {\n                return foundElement;\n            }\n        }\n\n        // Last resort: throw an error with helpful information\n        console.error('[StudioEditor] Could not convert element to DOM element:', element);\n        throw new Error('StudioEditor requires a valid DOM element or jQuery object');\n    }\n\n    _bindMethods() {\n        this.init = this.init.bind(this);\n        this.switchTab = this.switchTab.bind(this);\n        this.handleFileUpload = this.handleFileUpload.bind(this);\n        this.handleDragOver = this.handleDragOver.bind(this);\n        this.handleDragLeave = this.handleDragLeave.bind(this);\n        this.handleDrop = this.handleDrop.bind(this);\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n        this.processFile = this.processFile.bind(this);\n    }\n\n    init() {\n        console.log('[StudioEditor] Initializing PDF XBlock Studio Editor');\n\n        try {\n            // Ensure we have a proper DOM element first\n            const element = this._ensureElement();\n            console.log('[StudioEditor] Got DOM element for initialization');\n\n            // Find form and elements\n            this.form = element.querySelector('#pdf-form');\n            if (!this.form) {\n                console.error('[StudioEditor] Form not found');\n                console.error('[StudioEditor] Available form elements:',\n                    Array.from(element.querySelectorAll('form')).map(f => f.id || f.className));\n                return;\n            }\n\n            // Detect existing data and set appropriate tab\n            this._detectExistingDataAndSetTab();\n\n            // Set up tab switching\n            this._setupTabSwitching();\n\n            // Set up file upload\n            this._setupFileUpload();\n\n            // Set up form submission\n            this._setupFormHandlers();\n\n            console.log('[StudioEditor] Studio Editor initialized successfully');\n        } catch (error) {\n            console.error('[StudioEditor] Error during initialization:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Detect existing PDF data and set the appropriate tab\n     */\n    _detectExistingDataAndSetTab() {\n        try {\n            const element = this._ensureElement();\n            const urlInput = element.querySelector('#pdf-url');\n            const fileNameInput = element.querySelector('#pdf-file-name') || element.querySelector('input[name=\"pdf_file_name\"]');\n            const assetKeyInput = element.querySelector('#pdf-file-asset-key') || element.querySelector('input[name=\"pdf_file_asset_key\"]');\n            const fileInfo = element.querySelector('#file-info');\n\n            const existingUrl = urlInput ? urlInput.value.trim() : '';\n            const existingFileName = fileNameInput ? fileNameInput.value.trim() : '';\n            const existingAssetKey = assetKeyInput ? assetKeyInput.value.trim() : '';\n\n            // Check if file info already shows a filename (from server)\n            const fileInfoText = fileInfo ? fileInfo.textContent.trim() : '';\n            const hasExistingFileInfo = fileInfoText && !fileInfoText.includes('No file chosen') && !fileInfoText.includes('placeholder');\n\n            console.log('[StudioEditor] Detecting existing data...');\n            console.log('[StudioEditor] Existing PDF URL:', existingUrl);\n            console.log('[StudioEditor] Existing file name:', existingFileName);\n            console.log('[StudioEditor] Existing asset key:', existingAssetKey);\n            console.log('[StudioEditor] File info text:', fileInfoText);\n            console.log('[StudioEditor] Has existing file info:', hasExistingFileInfo);\n\n            // Priority order (matching Python get_pdf_url method):\n            // 1. Asset key (contentstore files)\n            // 2. File path (Django storage files)\n            // 3. URL (external URLs or data URLs)\n\n            if (existingAssetKey) {\n                // We have a contentstore asset\n                console.log('[StudioEditor] Found existing contentstore asset, switching to upload tab');\n                this.currentTab = 'upload';\n                this.switchTab('upload');\n\n                // Show uploaded file state for contentstore asset\n                const displayFileName = existingFileName || 'Uploaded PDF';\n                this.showUploadedFileState(displayFileName, 'open_edx_contentstore', existingAssetKey);\n\n            } else if (existingFileName || hasExistingFileInfo) {\n                // We have an uploaded file (Django storage or data URL)\n                console.log('[StudioEditor] Found existing uploaded file, switching to upload tab');\n                this.currentTab = 'upload';\n                this.switchTab('upload');\n\n                // Determine storage method based on URL content\n                let storageMethod = 'server_stored';\n                if (existingUrl.startsWith('data:application/pdf')) {\n                    storageMethod = 'data_url_fallback';\n                } else if (existingUrl) {\n                    // If there's both a file name and a URL, it might be Django storage\n                    storageMethod = 'django_file_storage';\n                }\n\n                // Show uploaded file state\n                const displayFileName = existingFileName || fileInfoText || 'Uploaded PDF';\n                this.showUploadedFileState(displayFileName, storageMethod);\n\n            } else if (existingUrl) {\n                // We have an external URL (not a data URL)\n                console.log('[StudioEditor] Found existing PDF URL, switching to URL tab');\n                this.currentTab = 'url';\n                this.switchTab('url');\n\n            } else {\n                // No existing data, default to upload tab\n                console.log('[StudioEditor] No existing PDF data, defaulting to upload tab');\n                this.currentTab = 'upload';\n                this.switchTab('upload');\n            }\n        } catch (error) {\n            console.error('[StudioEditor] Error detecting existing data:', error);\n            // Default to upload tab on error\n            this.currentTab = 'upload';\n            this.switchTab('upload');\n        }\n    }\n\n    _setupTabSwitching() {\n        try {\n            const element = this._ensureElement();\n            const tabButtons = element.querySelectorAll('[data-tab]');\n\n            tabButtons.forEach(button => {\n                button.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    const tabName = button.getAttribute('data-tab');\n                    this.switchTab(tabName);\n                });\n            });\n        } catch (error) {\n            console.error('[StudioEditor] Error setting up tab switching:', error);\n        }\n    }\n\n    switchTab(tabName) {\n        console.log(`[StudioEditor] Switching to tab: ${tabName}`);\n\n        try {\n            const element = this._ensureElement();\n\n            // Update button states\n            const tabButtons = element.querySelectorAll('[data-tab]');\n            tabButtons.forEach(button => {\n                if (button.getAttribute('data-tab') === tabName) {\n                    button.classList.add('active');\n                } else {\n                    button.classList.remove('active');\n                }\n            });\n\n            // Show/hide tab content\n            const uploadTab = element.querySelector('#upload-tab');\n            const urlTab = element.querySelector('#url-tab');\n\n            if (uploadTab && urlTab) {\n                if (tabName === 'upload') {\n                    uploadTab.style.display = 'block';\n                    urlTab.style.display = 'none';\n                } else {\n                    uploadTab.style.display = 'none';\n                    urlTab.style.display = 'block';\n                }\n            } else {\n                console.warn('[StudioEditor] Tab content elements not found');\n                console.warn('[StudioEditor] uploadTab:', uploadTab);\n                console.warn('[StudioEditor] urlTab:', urlTab);\n            }\n\n            this.currentTab = tabName;\n            this.emit('tabChanged', { tab: tabName });\n        } catch (error) {\n            console.error('[StudioEditor] Error switching tabs:', error);\n        }\n    }\n\n    _setupFileUpload() {\n        try {\n            const element = this._ensureElement();\n            const fileInput = element.querySelector('#pdf-file');\n            const uploadTrigger = element.querySelector('#upload-trigger');\n            const dropZone = element.querySelector('#drop-zone');\n\n            if (!fileInput || !uploadTrigger || !dropZone) {\n                console.warn('[StudioEditor] Upload elements not found');\n                console.warn('[StudioEditor] fileInput:', fileInput);\n                console.warn('[StudioEditor] uploadTrigger:', uploadTrigger);\n                console.warn('[StudioEditor] dropZone:', dropZone);\n                return;\n            }\n\n            // File input change\n            fileInput.addEventListener('change', this.handleFileUpload);\n\n            // Upload trigger button\n            uploadTrigger.addEventListener('click', (e) => {\n                e.preventDefault();\n                fileInput.click();\n            });\n\n            // Drag and drop\n            dropZone.addEventListener('dragover', this.handleDragOver);\n            dropZone.addEventListener('dragleave', this.handleDragLeave);\n            dropZone.addEventListener('drop', this.handleDrop);\n\n            // Prevent default drag behaviors on document\n            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n                document.addEventListener(eventName, (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                });\n            });\n        } catch (error) {\n            console.error('[StudioEditor] Error setting up file upload:', error);\n        }\n    }\n\n    handleFileUpload(event) {\n        const file = event.target.files[0];\n        if (file) {\n            // Reset to file selection state first (in case we're changing an uploaded file)\n            this.resetToFileSelectionState();\n\n            // Process the new file\n            this.processFile(file);\n        }\n    }\n\n    handleDragOver(event) {\n        event.preventDefault();\n        const element = this._ensureElement();\n        const dropZone = element.querySelector('#drop-zone');\n        dropZone.classList.add('drag-over');\n    }\n\n    handleDragLeave(event) {\n        event.preventDefault();\n        const element = this._ensureElement();\n        const dropZone = element.querySelector('#drop-zone');\n        dropZone.classList.remove('drag-over');\n    }\n\n    handleDrop(event) {\n        event.preventDefault();\n        const element = this._ensureElement();\n        const dropZone = element.querySelector('#drop-zone');\n        dropZone.classList.remove('drag-over');\n\n        const files = event.dataTransfer.files;\n        if (files.length > 0) {\n            // Reset to file selection state first (in case we're changing an uploaded file)\n            this.resetToFileSelectionState();\n\n            // Process the new file\n            this.processFile(files[0]);\n        }\n    }\n\n    processFile(file) {\n        console.log('[StudioEditor] Processing file:', {\n            name: file.name,\n            size: file.size,\n            type: file.type\n        });\n\n        // Validate file type\n        if (file.type !== 'application/pdf') {\n            this.showError('Please select a PDF file.');\n            return;\n        }\n\n        // Validate file size (100MB limit)\n        const maxSize = 100 * 1024 * 1024; // 100MB\n        if (file.size > maxSize) {\n            this.showError('File size must be less than 100MB.');\n            return;\n        }\n\n        // Store the file for form submission\n        this.uploadedFile = file;\n        console.log('[StudioEditor] File stored for upload');\n\n        // Update UI to show file info\n        this.updateFileInfo(file);\n\n        // Switch to upload tab and show file selected state\n        this.switchTab('upload');\n    }\n\n    updateFileInfo(file) {\n        console.log('[StudioEditor] updateFileInfo - Processing file:', file.name);\n\n        try {\n            // Use the centralized _ensureElement() method instead of manual conversion\n            const element = this._ensureElement();\n            console.log('[StudioEditor] updateFileInfo - Got DOM element successfully');\n\n            // **CRITICAL FIX**: Update the hidden field with the new file name\n            const hiddenFileNameField = element.querySelector('#pdf-file-name');\n            if (hiddenFileNameField) {\n                hiddenFileNameField.value = file.name;\n                console.log('[StudioEditor] updateFileInfo - Updated hidden field with file name:', file.name);\n            } else {\n                console.warn('[StudioEditor] updateFileInfo - Hidden pdf-file-name field not found');\n            }\n\n            const fileInfo = element.querySelector('#file-info');\n            if (fileInfo) {\n                const sizeInMB = (file.size / (1024 * 1024)).toFixed(2);\n                fileInfo.innerHTML = `\n                    <span class=\"filename\">${file.name}</span>\n                    <span class=\"filesize\">(${sizeInMB} MB)</span>\n                    <span class=\"file-status pending\">Ready to upload</span>\n                `;\n                console.log('[StudioEditor] updateFileInfo - File info updated successfully');\n            } else {\n                console.warn('[StudioEditor] updateFileInfo - #file-info element not found');\n                console.warn('[StudioEditor] updateFileInfo - Available elements in container:',\n                    Array.from(element.querySelectorAll('[id]')).map(el => el.id));\n            }\n        } catch (error) {\n            console.error('[StudioEditor] updateFileInfo - Error updating file info:', error);\n            console.error('[StudioEditor] updateFileInfo - Element details:', {\n                elementType: typeof this.element,\n                hasQuerySelector: typeof this.element.querySelector,\n                isJQuery: !!this.element.jquery,\n                elementConstructor: this.element.constructor?.name\n            });\n        }\n    }\n\n    /**\n     * Show the uploaded file state after successful upload\n     * @param {string} fileName - Name of the uploaded file\n     * @param {string} storageMethod - How the file was stored (open_edx_contentstore, django_file_storage, data_url_fallback)\n     * @param {string} storagePath - The path/URL where the file is stored\n     */\n    showUploadedFileState(fileName, storageMethod = 'unknown', storagePath = null) {\n        console.log('[StudioEditor] showUploadedFileState - Showing uploaded file state for:', fileName);\n        console.log('[StudioEditor] showUploadedFileState - Storage method:', storageMethod);\n        console.log('[StudioEditor] showUploadedFileState - Storage path:', storagePath);\n\n        try {\n            const element = this._ensureElement();\n            const fileInfo = element.querySelector('#file-info');\n            const uploadedFileInfo = element.querySelector('#uploaded-file-info');\n            const uploadTrigger = element.querySelector('#upload-trigger');\n            const dropZone = element.querySelector('#drop-zone');\n\n            if (fileInfo) {\n                // Generate appropriate preview URL based on storage method\n                let previewUrl = '';\n                let storageDisplay = '';\n                let canPreview = true;\n\n                switch (storageMethod) {\n                    case 'open_edx_contentstore':\n                        // For contentstore assets, use the asset URL directly\n                        previewUrl = storagePath || '';\n                        storageDisplay = 'Open edX Course Assets';\n                        canPreview = !!previewUrl;\n                        console.log('[StudioEditor] showUploadedFileState - Using contentstore asset URL:', previewUrl);\n                        break;\n\n                    case 'django_file_storage':\n                        // For Django file storage, use the serve_pdf_file handler\n                        previewUrl = this.runtime.handlerUrl(this.element, 'serve_pdf_file');\n                        storageDisplay = 'Django File Storage';\n                        canPreview = true;\n                        console.log('[StudioEditor] showUploadedFileState - Using Django storage handler URL:', previewUrl);\n                        break;\n\n                    case 'data_url_fallback':\n                        // For data URLs, we can't really preview in a new tab effectively\n                        previewUrl = '#';\n                        storageDisplay = 'Embedded Data URL';\n                        canPreview = false; // Data URLs are too large for new tab preview\n                        console.log('[StudioEditor] showUploadedFileState - Using data URL storage (preview disabled)');\n                        break;\n\n                    case 'server_stored':\n                        // This is for existing files detected on page load\n                        previewUrl = this.runtime.handlerUrl(this.element, 'serve_pdf_file');\n                        storageDisplay = 'Server Storage';\n                        canPreview = true;\n                        console.log('[StudioEditor] showUploadedFileState - Using server storage handler URL:', previewUrl);\n                        break;\n\n                    default:\n                        // Fallback for unknown storage methods\n                        previewUrl = this.runtime.handlerUrl(this.element, 'serve_pdf_file');\n                        storageDisplay = 'Unknown Storage';\n                        canPreview = true;\n                        console.log('[StudioEditor] showUploadedFileState - Using fallback handler URL:', previewUrl);\n                        break;\n                }\n\n                // Create the preview link HTML\n                const previewLinkHtml = canPreview && previewUrl !== '#' ?\n                    `<a href=\"${previewUrl}\" target=\"_blank\" style=\"color: #2e7d32; text-decoration: none;\">\n                        ${fileName}\n                    </a>` :\n                    `<span style=\"color: #2e7d32;\">${fileName}</span>`;\n\n                // Create the preview button HTML\n                const previewButtonHtml = canPreview && previewUrl !== '#' ?\n                    `<a href=\"${previewUrl}\" target=\"_blank\" class=\"button preview-btn\" style=\"background-color: #4caf50; color: white; padding: 6px 12px; border-radius: 4px; text-decoration: none; font-size: 12px; margin-right: 8px;\">\n                        <i class=\"fas fa-eye\"></i> Preview PDF\n                    </a>` :\n                    `<span class=\"button preview-btn disabled\" style=\"background-color: #ccc; color: #666; padding: 6px 12px; border-radius: 4px; font-size: 12px; margin-right: 8px; cursor: not-allowed;\">\n                        <i class=\"fas fa-eye\"></i> Preview Embedded\n                    </span>`;\n\n                // Update file info to show uploaded state\n                fileInfo.innerHTML = `\n                    <div class=\"uploaded-file-info\">\n                        <span class=\"filename\">\n                            <i class=\"fas fa-file-pdf\" style=\"color: #d32f2f; margin-right: 5px;\"></i>\n                            ${previewLinkHtml}\n                        </span>\n                        <span class=\"file-status uploaded\">\n                            <i class=\"fas fa-check-circle\" style=\"color: #4caf50; margin-right: 5px;\"></i>\n                            Uploaded successfully\n                        </span>\n                        <span class=\"storage-info\" style=\"color: #666; font-size: 12px;\">Storage: ${storageDisplay}</span>\n                        <div class=\"file-actions\" style=\"margin-top: 10px;\">\n                            ${previewButtonHtml}\n                            <button type=\"button\" class=\"button change-file-btn\" onclick=\"this.parentNode.parentNode.parentNode.querySelector('#pdf-file').click();\">\n                                <i class=\"fas fa-exchange-alt\"></i> Change File\n                            </button>\n                        </div>\n                    </div>\n                `;\n                console.log('[StudioEditor] showUploadedFileState - File info updated to uploaded state');\n                console.log('[StudioEditor] showUploadedFileState - Can preview:', canPreview);\n                console.log('[StudioEditor] showUploadedFileState - Preview URL:', previewUrl);\n            }\n\n            // Update the uploaded-file-info element with detailed information\n            if (uploadedFileInfo) {\n                let uploadedFileContent = '';\n\n                if (storageMethod === 'open_edx_contentstore' && storagePath) {\n                    uploadedFileContent = `\n                        <div class=\"uploaded-file-details\">\n                            <i class=\"fas fa-check-circle\" style=\"color: #28a745;\"></i>\n                            <span class=\"upload-status\">File uploaded successfully</span>\n                            <div class=\"asset-url\">\n                                <small>Asset URL: <code>${storagePath}</code></small>\n                            </div>\n                        </div>\n                    `;\n                } else if (fileName) {\n                    uploadedFileContent = `\n                        <div class=\"uploaded-file-details\">\n                            <i class=\"fas fa-info-circle\" style=\"color: #17a2b8;\"></i>\n                            <span class=\"upload-status\">File configured: ${fileName}</span>\n                            <div class=\"storage-method\">\n                                <small>Storage: ${storageDisplay}</small>\n                            </div>\n                        </div>\n                    `;\n                }\n\n                uploadedFileInfo.innerHTML = uploadedFileContent;\n                console.log('[StudioEditor] showUploadedFileState - Updated uploaded-file-info element');\n            }\n\n            // Update upload trigger button\n            if (uploadTrigger) {\n                uploadTrigger.innerHTML = '<i class=\"fas fa-exchange-alt\"></i> Change PDF File';\n                uploadTrigger.classList.add('change-file');\n                console.log('[StudioEditor] showUploadedFileState - Upload trigger updated to change mode');\n            }\n\n            // Update drop zone styling\n            if (dropZone) {\n                dropZone.classList.add('file-uploaded');\n                console.log('[StudioEditor] showUploadedFileState - Drop zone marked as uploaded');\n            }\n\n            console.log('[StudioEditor] showUploadedFileState - UI state updated successfully');\n\n        } catch (error) {\n            console.error('[StudioEditor] showUploadedFileState - Error updating uploaded state:', error);\n        }\n    }\n\n    /**\n     * Reset to file selection state (when changing files)\n     */\n    resetToFileSelectionState() {\n        console.log('[StudioEditor] resetToFileSelectionState - Resetting to file selection state');\n\n        try {\n            const element = this._ensureElement();\n            const fileInfo = element.querySelector('#file-info');\n            const uploadedFileInfo = element.querySelector('#uploaded-file-info');\n            const uploadTrigger = element.querySelector('#upload-trigger');\n            const dropZone = element.querySelector('#drop-zone');\n\n            // Reset file info\n            if (fileInfo) {\n                fileInfo.innerHTML = '<span class=\"placeholder\">No file chosen</span>';\n            }\n\n            // Reset uploaded file info\n            if (uploadedFileInfo) {\n                uploadedFileInfo.innerHTML = '';\n            }\n\n            // Reset upload trigger\n            if (uploadTrigger) {\n                uploadTrigger.innerHTML = '<i class=\"fas fa-cloud-upload-alt\"></i> Choose PDF File';\n                uploadTrigger.classList.remove('change-file');\n            }\n\n            // Reset drop zone\n            if (dropZone) {\n                dropZone.classList.remove('file-uploaded');\n            }\n\n            // Clear uploaded file\n            this.uploadedFile = null;\n\n            console.log('[StudioEditor] resetToFileSelectionState - Reset completed');\n\n        } catch (error) {\n            console.error('[StudioEditor] resetToFileSelectionState - Error resetting state:', error);\n        }\n    }\n\n    _setupFormHandlers() {\n        const element = this._ensureElement();\n        const submitButton = element.querySelector('#pdf-submit-options');\n        const cancelButton = element.querySelector('.cancel-button');\n\n        if (submitButton) {\n            submitButton.addEventListener('click', this.handleFormSubmit);\n        }\n\n        if (cancelButton) {\n            cancelButton.addEventListener('click', this.handleCancel);\n        }\n\n        // Form submission\n        this.form.addEventListener('submit', this.handleFormSubmit);\n    }\n\n    async handleFormSubmit(event) {\n        event.preventDefault();\n        console.log('[StudioEditor] Form submission started');\n\n        try {\n            this.setLoadingState(true);\n\n            // Collect form data first\n            const formData = this.collectFormData();\n            console.log('[StudioEditor] Collected form data:', formData);\n\n            // Validate form data\n            const validation = this.validateFormData(formData);\n            if (!validation.isValid) {\n                console.error('[StudioEditor] Form validation failed:', validation.errors);\n                this.showError(`Validation failed: ${validation.errors.join(', ')}`);\n                return;\n            }\n\n            // Create FormData for file upload\n            const submitData = new FormData();\n\n            // Add all form fields\n            submitData.append('display_name', formData.display_name);\n            submitData.append('pdf_file_name', formData.pdf_file_name);\n            submitData.append('allow_download', formData.allow_download);\n            submitData.append('allow_annotation', formData.allow_annotation);\n\n            // Add URL if provided (URL tab)\n            if (formData.pdf_url) {\n                submitData.append('pdf_url', formData.pdf_url);\n            }\n\n            // **CRITICAL: Add file if uploaded (File tab)**\n            const fileInput = this.container.querySelector('#pdf-file');\n            if (fileInput && fileInput.files && fileInput.files.length > 0) {\n                const file = fileInput.files[0];\n                console.log('[StudioEditor] Adding file to FormData:', {\n                    name: file.name,\n                    size: file.size,\n                    type: file.type\n                });\n                submitData.append('pdf_file', file);\n            } else {\n                console.log('[StudioEditor] No file found in file input');\n\n                // Check if we have stored file data from drag & drop\n                if (this.uploadedFile) {\n                    console.log('[StudioEditor] Adding stored file to FormData:', {\n                        name: this.uploadedFile.name,\n                        size: this.uploadedFile.size,\n                        type: this.uploadedFile.type\n                    });\n                    submitData.append('pdf_file', this.uploadedFile);\n                }\n            }\n\n            // Log FormData contents for debugging\n            console.log('[StudioEditor] FormData contents:');\n            for (let [key, value] of submitData.entries()) {\n                if (value instanceof File) {\n                    console.log(`  ${key}: [File] name=\"${value.name}\", size=${value.size}, type=\"${value.type}\"`);\n                } else {\n                    console.log(`  ${key}: ${value}`);\n                }\n            }\n\n            // Submit the data\n            const result = await this.submitData(submitData);\n            console.log('[StudioEditor] Submit result:', result);\n\n            if (result.result === 'success') {\n                this.showSuccess('Settings saved successfully!');\n\n                if (result.file_uploaded) {\n                    console.log('[StudioEditor] File upload successful:', {\n                        fileName: result.file_name,\n                        storageMethod: result.storage_method,\n                        storagePath: result.storage_path\n                    });\n\n                    // Update UI to show uploaded file state\n                    this.showUploadedFileState(\n                        result.file_name,\n                        result.storage_method || 'unknown',\n                        result.storage_path\n                    );\n                }\n\n                // Auto-close after success (optional)\n                setTimeout(() => {\n                    this.closeEditor();\n                }, 1500);\n            } else {\n                console.error('[StudioEditor] Submit failed:', result.message);\n                this.showError(result.message || 'Failed to save settings');\n            }\n\n        } catch (error) {\n            console.error('[StudioEditor] Form submission error:', error);\n            this.showError(`Error: ${error.message}`);\n        } finally {\n            this.setLoadingState(false);\n        }\n    }\n\n    collectFormData() {\n        const element = this._ensureElement();\n        const data = {};\n\n        // Basic form fields - use correct IDs from HTML template\n        data.display_name = element.querySelector('#pdf-display-name')?.value?.trim() || '';\n        data.pdf_file_name = element.querySelector('#pdf-file-name')?.value?.trim() || '';\n\n        // Handle boolean fields - they are select elements in the HTML\n        const downloadSelect = element.querySelector('#pdf-allow-download');\n        const annotationSelect = element.querySelector('#pdf-allow-annotation');\n\n        data.allow_download = downloadSelect?.value === 'true';\n        data.allow_annotation = annotationSelect?.value === 'true';\n\n        // Provide default display name if empty\n        if (!data.display_name) {\n            data.display_name = 'PDF Viewer';\n            console.log('[StudioEditor] Using default display name: PDF Viewer');\n        }\n\n        // Handle PDF source based on current tab\n        if (this.currentTab === 'url') {\n            data.pdf_url = element.querySelector('#pdf-url')?.value?.trim() || '';\n        } else {\n            data.pdf_url = ''; // Clear URL when using file upload\n        }\n\n        console.log('[StudioEditor] Collected form data:', {\n            display_name: data.display_name,\n            pdf_file_name: data.pdf_file_name,\n            allow_download: data.allow_download,\n            allow_annotation: data.allow_annotation,\n            pdf_url: data.pdf_url,\n            currentTab: this.currentTab,\n            hasUploadedFile: !!this.uploadedFile,\n            hasFileInput: !!(element.querySelector('#pdf-file')?.files?.length)\n        });\n\n        return data;\n    }\n\n    validateFormData(data) {\n        const errors = [];\n\n        // Display name is now automatically set to default if empty, so no need to validate\n        console.log('[StudioEditor] Validating form data:', data);\n\n        // Check if we have either a URL or a file\n        const hasUrl = data.pdf_url && data.pdf_url.trim().length > 0;\n\n        // Check for files in multiple ways:\n        // 1. Newly uploaded file (this.uploadedFile)\n        // 2. File in file input element\n        // 3. Existing uploaded file (pdf_file_name field has value)\n        // 4. Existing asset key (check hidden field)\n        const element = this._ensureElement();\n        const existingAssetKey = element.querySelector('#pdf-file-asset-key')?.value?.trim() || '';\n        const existingFilePath = element.querySelector('#pdf-file-path')?.value?.trim() || '';\n\n        const hasFile = this.uploadedFile ||\n                       (this.container.querySelector('#pdf-file')?.files?.length > 0) ||\n                       (data.pdf_file_name && data.pdf_file_name.trim().length > 0) ||\n                       (existingAssetKey.length > 0) ||\n                       (existingFilePath.length > 0);\n\n        console.log('[StudioEditor] File validation details:', {\n            hasUploadedFile: !!this.uploadedFile,\n            hasFileInput: !!(this.container.querySelector('#pdf-file')?.files?.length),\n            hasPdfFileName: !!(data.pdf_file_name && data.pdf_file_name.trim().length > 0),\n            hasAssetKey: !!(existingAssetKey.length > 0),\n            hasFilePath: !!(existingFilePath.length > 0),\n            pdfFileName: data.pdf_file_name,\n            assetKey: existingAssetKey,\n            filePath: existingFilePath\n        });\n\n        if (!hasUrl && !hasFile) {\n            errors.push('Please provide either a PDF URL or upload a PDF file');\n        }\n\n        // Validate URL format if provided\n        if (hasUrl) {\n            try {\n                // Allow data URLs for base64 encoded files\n                if (data.pdf_url.startsWith('data:application/pdf')) {\n                    // Valid data URL\n                    console.log('[StudioEditor] Valid data URL detected');\n                } else {\n                    new URL(data.pdf_url);\n                    console.log('[StudioEditor] Valid external URL detected');\n                }\n            } catch (e) {\n                errors.push('PDF URL is not a valid URL');\n            }\n        }\n\n        console.log('[StudioEditor] Validation result:', {\n            hasUrl,\n            hasFile,\n            errors,\n            isValid: errors.length === 0\n        });\n\n        return {\n            isValid: errors.length === 0,\n            errors: errors\n        };\n    }\n\n    async submitData(data) {\n        try {\n            console.log('[StudioEditor] Submitting data to backend...');\n\n            // Get CSRF token\n            const csrfToken = this.getCSRFToken();\n            console.log('[StudioEditor] CSRF token found:', !!csrfToken);\n\n            // Prepare fetch options\n            const fetchOptions = {\n                method: 'POST',\n                headers: {}\n            };\n\n            // Handle different data types\n            if (data instanceof FormData) {\n                // For FormData (file uploads), don't set Content-Type header\n                // Let the browser set it with boundary\n                fetchOptions.body = data;\n                console.log('[StudioEditor] Using FormData for file upload');\n\n                // Add CSRF token to FormData\n                if (csrfToken) {\n                    data.append('csrfmiddlewaretoken', csrfToken);\n                }\n            } else {\n                // For regular JSON data\n                fetchOptions.headers['Content-Type'] = 'application/json';\n                fetchOptions.body = JSON.stringify(data);\n                console.log('[StudioEditor] Using JSON data');\n\n                // Add CSRF token to headers\n                if (csrfToken) {\n                    fetchOptions.headers['X-CSRFToken'] = csrfToken;\n                }\n            }\n\n            console.log('[StudioEditor] Fetch options:', {\n                method: fetchOptions.method,\n                headers: fetchOptions.headers,\n                bodyType: data instanceof FormData ? 'FormData' : 'JSON'\n            });\n\n            // Make the request\n            const response = await fetch(this.runtime.handlerUrl(this.element, 'studio_submit'), fetchOptions);\n\n            console.log('[StudioEditor] Response status:', response.status);\n            console.log('[StudioEditor] Response headers:', Object.fromEntries(response.headers.entries()));\n\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('[StudioEditor] HTTP error response:', errorText);\n                throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n            }\n\n            const result = await response.json();\n            console.log('[StudioEditor] Parsed response:', result);\n\n            return result;\n\n        } catch (error) {\n            console.error('[StudioEditor] Submit error:', error);\n            throw error;\n        }\n    }\n\n    getCSRFToken() {\n        // Get CSRF token from cookie or meta tag\n        const csrfToken = document.querySelector('[name=csrfmiddlewaretoken]')?.value ||\n                         document.querySelector('meta[name=csrf-token]')?.content ||\n                         this.getCookie('csrftoken');\n        return csrfToken;\n    }\n\n    getCookie(name) {\n        let cookieValue = null;\n        if (document.cookie && document.cookie !== '') {\n            const cookies = document.cookie.split(';');\n            for (let i = 0; i < cookies.length; i++) {\n                const cookie = cookies[i].trim();\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                    break;\n                }\n            }\n        }\n        return cookieValue;\n    }\n\n    handleCancel(event) {\n        event.preventDefault();\n        console.log('[StudioEditor] Cancel clicked');\n        this.closeEditor();\n    }\n\n    closeEditor() {\n        // Notify the Studio runtime that the user wants to cancel\n        console.log('[StudioEditor] Notifying runtime of cancel event');\n        this.runtime.notify('cancel');\n\n        // Emit local event for any listeners\n        this.emit('cancel');\n    }\n\n    setLoadingState(loading) {\n        const element = this._ensureElement();\n        const submitButton = element.querySelector('#pdf-submit-options');\n        const cancelButton = element.querySelector('.cancel-button');\n\n        if (submitButton) {\n            submitButton.disabled = loading;\n            submitButton.textContent = loading ? 'Saving...' : 'Save';\n        }\n\n        if (cancelButton) {\n            cancelButton.disabled = loading;\n        }\n    }\n\n    showError(message) {\n        console.error('[StudioEditor] Error:', message);\n        this.showMessage(message, 'error');\n    }\n\n    showSuccess(message) {\n        console.log('[StudioEditor] Success:', message);\n        this.showMessage(message, 'success');\n    }\n\n    showMessage(message, type = 'info') {\n        const element = this._ensureElement();\n\n        // Remove existing messages\n        const existingMessages = element.querySelectorAll('.studio-message');\n        existingMessages.forEach(msg => msg.remove());\n\n        // Create message element\n        const messageEl = document.createElement('div');\n        messageEl.className = `studio-message studio-message-${type}`;\n        messageEl.innerHTML = `\n            <i class=\"fas fa-${type === 'error' ? 'exclamation-triangle' : type === 'success' ? 'check-circle' : 'info-circle'}\"></i>\n            <span>${message}</span>\n        `;\n\n        // Insert at top of form\n        this.form.insertBefore(messageEl, this.form.firstChild);\n\n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            if (messageEl.parentNode) {\n                messageEl.remove();\n            }\n        }, 5000);\n    }\n\n    /**\n     * Utility method to ensure we always get a proper DOM element from this.element\n     * @returns {Element} Native DOM element\n     */\n    _ensureElement() {\n        console.log('[StudioEditor] _ensureElement - Starting element conversion');\n        console.log('[StudioEditor] _ensureElement - Element type:', typeof this.element);\n        console.log('[StudioEditor] _ensureElement - Element constructor:', this.element?.constructor?.name);\n        console.log('[StudioEditor] _ensureElement - Has querySelector:', typeof this.element?.querySelector);\n        console.log('[StudioEditor] _ensureElement - Is jQuery:', !!this.element?.jquery);\n\n        let element = this.element;\n\n        // If this.element is still a jQuery object, convert it\n        if (!element.querySelector && element.jquery) {\n            console.log('[StudioEditor] _ensureElement - Converting jQuery object to DOM element');\n            console.log('[StudioEditor] _ensureElement - jQuery object length:', element.length);\n            console.log('[StudioEditor] _ensureElement - jQuery object has get method:', typeof element.get === 'function');\n\n            // Try element[0] first (most common way)\n            let domElement = element[0];\n            console.log('[StudioEditor] _ensureElement - Trying element[0]:', domElement);\n\n            // If that doesn't work, try element.get(0)\n            if (!domElement || domElement.nodeType !== Node.ELEMENT_NODE) {\n                domElement = element.get(0);\n                console.log('[StudioEditor] _ensureElement - Trying element.get(0):', domElement);\n            }\n\n            if (domElement && domElement.nodeType === Node.ELEMENT_NODE) {\n                element = domElement;\n                console.log('[StudioEditor] _ensureElement - Successfully converted jQuery to DOM element');\n            } else {\n                console.error('[StudioEditor] _ensureElement - Failed to convert jQuery object to DOM element');\n                console.error('[StudioEditor] _ensureElement - domElement:', domElement);\n                console.error('[StudioEditor] _ensureElement - domElement nodeType:', domElement?.nodeType);\n            }\n        }\n\n        // If we still don't have querySelector, try the _ensureDOMElement method again\n        if (!element.querySelector) {\n            console.log('[StudioEditor] _ensureElement - Element still lacks querySelector, trying _ensureDOMElement');\n            try {\n                element = this._ensureDOMElement(this.element);\n                console.log('[StudioEditor] _ensureElement - _ensureDOMElement successful');\n            } catch (error) {\n                console.error('[StudioEditor] _ensureElement - _ensureDOMElement failed:', error);\n                throw error;\n            }\n        }\n\n        // Final validation\n        if (!element || typeof element.querySelector !== 'function') {\n            console.error('[StudioEditor] _ensureElement - Final element is invalid');\n            console.error('[StudioEditor] _ensureElement - Final element:', element);\n            console.error('[StudioEditor] _ensureElement - Final element type:', typeof element);\n            throw new Error('Could not convert element to a valid DOM element with querySelector method');\n        }\n\n        console.log('[StudioEditor] _ensureElement - Successfully got DOM element');\n        return element;\n    }\n}\n\n// Global function for XBlock framework compatibility\nwindow.PdfxXBlockEdit = function(runtime, element) {\n    return new StudioEditor(runtime, element);\n};\n\nexport default StudioEditor;"],"names":["EventEmitter","constructor","this","events","Map","on","event","listener","options","Error","has","set","listenerData","once","get","push","off","listeners","index","findIndex","l","splice","length","delete","emit","args","slice","hadListeners","apply","error","console","eventNames","Array","from","keys","listenerCount","map","removeAllListeners","clear","setMaxListeners","n","maxListeners","getMaxListeners","StudioEditor","runtime","element","super","_ensureDOMElement","container","form","currentTab","uploadedFile","_bindMethods","document","readyState","addEventListener","init","log","_a","name","nodeType","jquery","Node","ELEMENT_NODE","fn","hasGet","hasJquery","element0","element0Type","_b","domElement","foundElement","querySelector","bind","switchTab","handleFileUpload","handleDragOver","handleDragLeave","handleDrop","handleFormSubmit","handleCancel","processFile","_ensureElement","querySelectorAll","f","id","className","_detectExistingDataAndSetTab","_setupTabSwitching","_setupFileUpload","_setupFormHandlers","urlInput","fileNameInput","assetKeyInput","fileInfo","existingUrl","value","trim","existingFileName","existingAssetKey","fileInfoText","textContent","hasExistingFileInfo","includes","displayFileName","showUploadedFileState","storageMethod","startsWith","forEach","button","e","preventDefault","tabName","getAttribute","classList","add","remove","uploadTab","urlTab","style","display","warn","tab","fileInput","uploadTrigger","dropZone","click","eventName","stopPropagation","file","target","files","resetToFileSelectionState","dataTransfer","size","type","showError","updateFileInfo","hiddenFileNameField","sizeInMB","toFixed","innerHTML","el","elementType","hasQuerySelector","isJQuery","elementConstructor","fileName","storagePath","uploadedFileInfo","previewUrl","storageDisplay","canPreview","handlerUrl","previewLinkHtml","previewButtonHtml","uploadedFileContent","submitButton","cancelButton","setLoadingState","formData","collectFormData","validation","validateFormData","isValid","errors","join","submitData","FormData","append","display_name","pdf_file_name","allow_download","allow_annotation","pdf_url","key","entries","File","result","showSuccess","file_uploaded","file_name","storage_method","storage_path","setTimeout","closeEditor","message","data","_d","_c","downloadSelect","annotationSelect","_f","_e","hasUploadedFile","hasFileInput","_h","_g","hasUrl","existingFilePath","hasFile","hasPdfFileName","hasAssetKey","hasFilePath","pdfFileName","assetKey","filePath","URL","csrfToken","getCSRFToken","fetchOptions","method","headers","body","JSON","stringify","bodyType","response","fetch","status","Object","fromEntries","ok","errorText","text","statusText","json","content","getCookie","cookieValue","cookie","cookies","split","i","substring","decodeURIComponent","notify","loading","disabled","showMessage","msg","messageEl","createElement","insertBefore","firstChild","parentNode","window","PdfxXBlockEdit"],"mappings":"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"}